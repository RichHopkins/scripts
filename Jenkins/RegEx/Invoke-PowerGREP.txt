[CmdletBinding()]
param
(
	[ValidateSet('CFSQL_Inline',
				 'COM_CreateObject',
				 'COM_SCOPE_Application',
				 'COM_SCOPE_Form',
				 'COM_SCOPE_Request',
				 'COM_SCOPE_Server',
				 'COM_SCOPE_URL',
				 'GetAuthUser',
				 'htmleditformat',
				 'NavService',
				 'RemoteHandler',
				 IgnoreCase = $true)]
	[string]$projectName
)

Import-Module eqDevOps
$PowerGrep = Get-XMLFile -xmlFile "D:\Workflow\Builds\DevInt\Logs\RegEx\PowerGREP.xml"
$xPath = "/PowerGREP/Project[@Name=`"$projectName`"]"
$projectData = (Select-Xml -Xml $PowerGrep -XPath $xPath).get_node()
$projectData.LastCount = $projectData.NewCount

$RegexFile = $Env:RegexFileContent
New-Item "D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\job.pga" -ItemType file -Force -Value "$RegexFile" | Out-Null
New-Item "D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\output.txt" -ItemType file -Force | Out-Null
New-Item "D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\report.txt" -ItemType file -Force | Out-Null

& cmd /c D:\apps\powergrep4\powerGrep4.exe D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\job.pga /execute /resultsoptions file file header none none match /save D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\filereport.txt /quit
$report = Get-Content "D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\filereport.txt"

$report[0] -match "\d{1,4} match" | Out-Null
$matches[0] -match "\d{1,4}" | Out-Null
$ErrorCount = $matches[0]
$projectData.NewCount = $ErrorCount

$allFilesWithErrors = @()
$newFilesWithErrors = @()
for ($i = 1; $i -le ($report.Length - 1); $i++) {
	$report[$i] -match "(D:\\Workflow\\Environments\\DevInt\\core.*)" | Out-Null
	$fileName = $matches[0]
	$allFilesWithErrors = $allFilesWithErrors + $fileName
	$report[$i] -match "(\d{1,3} matches|1 match)" | Out-Null
	$matches[0] -match "(\d{1,3})" | Out-Null
	[string]$iMatches = $matches[0].ToString()
	if ($projectData.Match.FileName -contains $fileName) {
		#node found
		$xPath = "/PowerGREP/Project[@Name=`"$projectName`"]/Match[@FileName=`"$fileName`"]"
		$fileNode = (Select-Xml -Xml $PowerGrep -XPath $xPath).get_node()
		if ($fileNode.MatchCount -gt $iMatches) {
			Write-Output "Less errors found in $fileName"
			$fileNode.MatchCount = $iMatches
		} elseif ($fileNode.MatchCount -lt $iMatches) {
			Write-Output "New errors found in $fileName"
			$fileNode.MatchCount = $iMatches
			$newFilesWithErrors = $newFilesWithErrors + $fileName
		}
	} else {
		#need to add node
		Write-Output "New errors found in $fileName, this is a new file"
		$fileNode = $PowerGrep.CreateElement("Match")
		$fileNode.SetAttribute("FileName", "$fileName")
		$fileNode.SetAttribute("MatchCount", "$iMatches")
		$projectData.AppendChild($fileNode)
		$newFilesWithErrors = $newFilesWithErrors + $fileName
	}
}

#see if any current nodes in the xml don't exist in latest scan and need to be removed.
$nodesToRemove = Compare-Object -ReferenceObject $allFilesWithErrors -DifferenceObject $projectData.Match.FileName -PassThru
if ($nodesToRemove) { Write-Output "Removing the following nodes from the xml:" }
foreach ($node in $nodesToRemove) {
	Write-Output "No errors found in $node, removing it from the list."
	$xPath = "/PowerGREP/Project/Match[@FileName=`"$node`"]"
	$fileNode = (Select-Xml -Xml $PowerGrep -XPath $xPath).get_node()
	$projectData.RemoveChild($fileNode) | Out-Null
}

Set-XMLFile -xmlFile "D:\Workflow\Builds\DevInt\Logs\RegEx\PowerGREP.xml" -xmlData $PowerGrep

if ($newFilesWithErrors) {
	#new errors were found
	$newErrorCount = 0
	& cmd /c D:\apps\powergrep4\powerGrep4.exe D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\job.pga /execute /resultsoptions "match context number" file header none none match /save D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\fullreport.txt /quit
	$fullreport = Get-Content "D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\fullreport.txt" -Raw
	[regex]$regex = "(?=\d{1,3} match)"
	$arrFullReport = $regex.Split($fullreport)
	for ($i = 4; $i -le ($arrFullReport.Length - 1); $i++) {
		$arrFullReport[$i] -match "D:\\Workflow\\Environments\\DevInt\\core\\.*" | Out-Null
		$fileName = $matches[0]
		if ($newFilesWithErrors -contains $fileName.Trim()) {
			$newErrorCount++
			[string]$value = "`n" + $arrFullReport[$i]
			Add-Content -Path "D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\report.txt" -Value $value
		}
	}
	if ($newErrorCount -eq 1) {
		$body = @"
A new instance of $projectName was found.<br>
Please see attachment for details.<br><br><br>
"@
	} else {
		$body = @"
$newErrorCount new instances of $projectName were found.<br>
Please see attachment for details.<br><br><br>
"@
	}
	write-output " "
	write-output " "
	write-output "Found $ErrorCount $projectName Instances overall"
	write-output " "
	write-output "$newErrorCount of them are new"
	write-output " "
	write-output " "
	$attachment = "D:\Workflow\Builds\DevInt\Logs\RegEx\$projectName\report.txt"
	#Only emailing DevOps for now, once I'm sure everything is good I'll send to proper groups
	#Send-MailMessage -Attachments $attachment -To "_COE.EntArch.Leaders@equator.com","EQ_Dev.TeamLeads@altisource.com" -Cc "_COE.EntArch.DevOps@equator.com" -From "_COE.EntArch.DevOps@equator.com" -Subject "RegEx Scan: $projectName" -Body $body -BodyAsHtml -SmtpServer "smtp-dev"
	Send-MailMessage -Attachments $attachment -To "_COE.EntArch.DevOps@equator.com" -From "_COE.EntArch.DevOps@equator.com" -Subject "RegEx Scan: $projectName" -Body $body -BodyAsHtml -SmtpServer "smtp-dev"
	throw 1
} else {
	write-output " "
	write-output " "
	write-output "No new errors found"
	write-output " "
	write-output " "
}