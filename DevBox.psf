<File version="3.2">
  <FileID>6c60f959-0f17-4a81-a3ac-dba26ce3f024</FileID>
  <LastExport>132054362474978824</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAAHyWSURBVHhe7f13lB3lue6Laux97vnnjrvvGHvv
s8+5a3vZyxgMxhhsY2OcTTZOC4OxMdhEk7MEklDOsZW6W51zzjnnnHPOOeecu5/7vd/siVqihaRW
I3qi5zfGT13hqzBrTtX7VM2qmpsIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEKIafPeb3/7Ox9b
RzcfaztnHytbR0oppZSaoNYOLj7nLG19brv1Vp/lGn95HnzwoYiU/CpUtI+hrGUIpc2UUkopNUWl
jld3TcDNNwTLZf7yODi7+1R3TiCluBGpxU2UUkopNVkbkVbWipL67isHADtHN5/qjjGkl7UgY9n0
0matdGeWt35mGKWUUvpVMquiDZkVrWtST6tq5VrncT3LNmpYB8NryaxoR0FV25UDgK2Dy0UBQP5m
qZkV1nYiqagRMbm1ur+gpvOijUUppZR+FUwvbUFkahnCkosRnlxyTco0UenlSMyvW9P0YlhSMRJy
axCbVaW7V2tzNcrRvwSRawsAnePIUBOlFDejtXcEIxPT8E0uQlxBDVJK6hGQpmZc2oDZuQUdDGRj
6YVQSimlJmx2ZZsu3uGq8KYUNSBJdV+LMk2UCg8BMfmIz6lGUoFheGJ+LZIL65FW0qxNXf4rJhfU
6/GfzievFkFxBXodZFySGifjE9Vwmb9xmmTVVs9LHZzr8cttZJysQ0xmJXKq2pFV2YHC6vZrCwBp
qrDXdwwgJLMUxQ3tMDI2OY3gjFIU1rWhtm1AtWtVC2hXG68N2VUdn9mgn1rRpk9LSFs5i7BqG0op
pfRLUgeAvDrEZFTofmORvlplmjh15C4FPLWwUdfHtBI5s9Cqjupr4RuRjsCYLATFZiMgOgt+kRmq
YDeoA2lDO91WGZpYjKi0cmSoOmz4Ll++dm9BeEoRPIKTEKOWkZhfD8+QZIQk5Ot6LW2krXTHZ1fr
MwjZ1xoAaromdLHOre5ASEa5Otqv14V/YXER8wuLWFLdcvQfmlWm22WU1CEiIRNRKTmISS/VC8up
6tRKIJCin13VhfTCaoTHpyMqOR/pZW2GNtWqjQoE2Woaw18JEobvLyillNIbqRwxJ6nCGqsCQJY6
qE1XxdhodoWqV8qsZbMr1d/ydqRLcV5uI9PEZVUjOL4QaUVNqvCrGqmKe25VN/xVsS8rrUBtbT1K
S8tRX9eI3LwiBEZnq+V26XZiplJO/UenlxvWQRV0CQJyVt4vOA5dnV1w942Ai3cEerp74OMfgWh1
tC8H4dJO/spXCHEqBOSoOp6tam1hzTUGACnGiYV1auJmbVZl06fm1bQgMrcCieoFphdUICIxDzk1
XYiITUZcTjXSCipVAqmA3FKYrpJPRmkDYpKyEJ1RjMjENCQVqESTX4Ho1AKkFTcgOa9K/a1HUl6N
Xu5qbwyllFL6RWoMAHGZ6uhZFXgp4JlSxJXBsbkIiExHUHSm1l8dzUellamaaGgnyjTx2TU6AEgw
yFQBQabPre5W0+eguroWTh6h6ig+Ed6B0aiqrIG/CgAyXtqJWcqwpBIVACpU4GhX85WL7+VMewf8
IjKQV1CGkeERDA4OoqS0ErbuIbrOSuHPlHZqGvkqYE0BoLZ7Ui2oXa1QJ+Lya9WMG1QgaETGCtPL
G3QIyKvpVkf2lerovxD5jUNIyS5CSHQiwuLSER6XguCoRMRmlSEuPR/RyTkIjU1BeEKW2rhFiEjK
1UEhIjEbCVlFCIpMRHJhg2GFl88GUEoppTdKOfMtp+TlKF6OyqWAS1GPyapBaLgcfXegrbUV7W1t
aKqvh4d/tKqXhnaiTJOQU4vghCJ9RiCzQr4WV/Ot6UVwXC4y0jPh5B2F2Fw1bWAc0lV/QEyOGt/z
6TzkrEJYciliMiqRo4q+PrJXhV3OmIcmFcHLNwwD/X0YGhyAj28IPEKSkVcr08uV/ypAqGmS8urU
wXiNqtFypr0LRbUdVw4AdioANPbPqJl1obihF1G51YhVR/GXo6J1CJlFlYhMzlML6kBMcrYq9nkq
BKQgMaccmaWNCI+KQURqCTILKlQYKEdyVgFCVTiITi1CbmUTopJykJJfisDweGSqFS+s60a+Wj6l
lFJ6Iy2s79bf5RsCQKehIKsiLl9bewTEwsk9SB3Bi8Gwc/GDpzqSNwYFUaaR7/pD1RG8fJefraaV
gp6vAoBfRDrSUtOQnJyK6JgEFQaykJCQBL/ITDW+R7cz2KZqZhliM6v0gbgsX6uCiItXKGqrK+Ho
6gtbRy801tfCwcUXiSq05MhX7irESFCQsxhyLUNRQ496Tb0ore+6igDg6ObTOrSA4sZeFNT1oGd4
EtF5FUgrq8fM3Pxy2b9ATccw8qvbkJhZiMSsYmSWtaC0uV8d2atCr4JDUeMAMgrKkKFeVFFNK+Iz
8pGUW4FCFS7SVZv4zCK1gVqQUVyLrLIGZKjAUNI0oJdPKaWU3kilfmWVq1olp8+XA4AxBEgBlu/h
Vyq32BnbGAOAHH1HpJTqAKCn08O7EJddBXu3YDh7hcDFO1QX8/MOPojJrNBfAawMAHIBoJzCz63p
guEauU59xj0gKgNWjj7wUWEiMr0Mdq6BcPaJ0F8/5KplS9tcdcQvZzFSChtR1jKAUmV5U8/VBYCO
0SU10aAq3v3oGprC2NQssqta4Rybi8qWHkzOzGNi2WoVAEqaB1HRPoLytmGtTFvRNqI0dJer7vJW
wyMJpZ2MMw6XbhlX3mqYVrpLmwf0eEoppfRGKnVLTrsn5dbpg9HCut4L1veh6CL79bCVbWSaFFV8
I1LKkCtntBtUGzW8QFmsDoilP08d7cspe/mbr4bLvC7Mow8Fapx8/y9fJcj8ihrUspaVeisH1qXL
j+ovVuNLmgZRrOZrXK9S1Z++/CTASqm5ysqW/qsLAN3jQKUqzGKZLswjqO0aV90jKGkZVgu+YLka
pgs8pZRSauLKQakU1PgcuR+/Yc1mlLUjPnuVeeQ3IvkSL20jy04vaUVKUTMSl9cjcdmV7VbrNw6L
y6pVoaMPVR2jkMf7V7cNXjkAOKgA0DMJNdEYajrH0NQ9+qnNPeqvuGKY7qeUUkq/Ckqt61W1T3XX
dw6j4RqVaWTalr5xNHSNXPM8jO1besdVzR1b+zro+jyma3lt9xRq24eu7gyADgDtasFdYxgbHaGU
UkqpCTk+NoKB4ZHrCwAjIyOUUkopNSFHVQjoH2IAoJRSSm8qGQAopZTSm9AvPACMjo5+Ya62PEop
pZRe2S80AAwNDaG/v/8Lc3h4eN2DwFcxWNxMYYnBkFJKr84vNABIkZ6ensbs7Kx2cVF+I3BJdy/o
btW3tIi5uTn964Hz6u/cvOFJgtKt2y0sYE79nZ9fkNa6W4ZPTEygs7MTfX196O3tXTe7u7vR09Oz
6jhTVV7TasO/asr7NjAwwBBAKaVX4RcaAGRnvLRkKPTC6EAvWtr7dPf0+DBaW5rR3tmr+7vaO7Co
uxbQpIZ/OtVyUMDCNDq6ug3dCgkNUvxlOZNT0yogzGNqYhzjE5OG0DA3i/HxMcxIkJiZ1kVBwsXM
zJQ+czCpgsmEGj86Nq7nNammlXlJIZFfTxoeHsHs3LweJ2FEbpmQ6cSx8QlMT6n5DA19OuzqHFHL
n8HoyGrjhvXyVxt+qSMjozpYjawybjWlMA4PD6nXOqFC2KKabggTk2qbqW10ra9hXL32ObVdpibV
9hodM2wHNb8LbYb0ezA1NanPABmHj42Pq+CmtuW8wfExVaRHx/X7Jq9janpGr5uMm56eUu/HhJ5e
3tvx8dEL3Xo643IN85VtIQ6p903ePwYASim9sl94AJCdulBdmAMntwAEeXkgLiUF7o7mCEvIQGFp
NRJDA+Bi7Yiw8DhEh4fDxsIaUXFZaKjKx+aPD2FcFaowP3uYW9iiuKZNz0/OAsgZBimolUX58PP1
R1FVEzqaq+DnH4Dw8Ag0NrcjNTIMiakFGFXFIizQB8mZhap4TaA0Px81TZ0Y6G1FQmIcalRbKToS
KoaGhjExNoKUuDCEhIYiKCYaPYNSdGdUgVpAZ0sd8orKMK0K2qxa/pgqOJOqoErhktc9JQVJFSgp
RNPTs4ZuNXxsZAC52TnoH5nQ002o4jWmAoi8hnHVPaPmJ+s2OTmlCuiUGjeqC+7YmCp4atnTqqjK
MqfHBpCRmYWh8Wl9RkTmM6GKrhRBKZBSgGWesl6yPlIUx8Yn0ddej6CgEAxPzaC5qgAR8anLr0GF
JbWMiUnDPGQ6mZ9hvcZ04Z1RwyfVurW3NiI2OhxVjZ0YG+xEfnGper3L81DTTc3Moau5Tr2vlZhV
20pe56Sab0dbM1KT4xAYHIyg4Gi09Q5hrL8dUdGxGFPzz02Ph4+3FwICQ5GTk4+quia9LlWlRWhs
7dLzqCgtRHNnHwZ729Vyy3Rg7OtoQk5uDgoKi9A7qD7M6v1jAKCU0iv7xQcAfQC/COvTx9AwYAgD
8hOJZ0/uhX9UkirC7ehsV9YVY9+OrThh5YDxoQGYnbVQR6f9MDtpieqaImzfugPu7p7IqWjS85AA
MKKKZ11xOo6ftkNleSlc1XgnR0uctHZCTW0dMhPCVDAIhovVeRw9cRI+XoGws7BAblkFtrz+CkLS
ShHta4vDhw/huKUTpuYWDAFAHalPDLRh//6dqO0ahIfDcTgHJ2CopwmltQ3ITw7G4bMOqlD2Iacg
H4MqXNRXl6Giuk4XqobaapSWVeqj0+ryfJTV1Okj7umRDuzesQOFtS0oLSpES4c6Mh/oQ0lxMbra
W+BkfR7Z5Q1oqqtGZVUN+gYG9c9KDo8Mo7AgC6U19Yjy84RvaJQKANno6etCckYS2vsG0KkKc35B
IfrUm9nd3ooiVRB7egd0iJAAMDmzgObiBPz4p/ehqncC7mab8dRbuzE5PoTEjBR0DQyhvbleF9Lh
8Sl0tNQjWxXi/sEh1KggllFUgsX5KYT6euOD1/+Gp177BC11RThhaacCU7eaRyoGVCCR98zl7GGc
dfBVr60decUlmJubQrivBz7ZvQNh6QVI9XfFefdINBTE4pHHntQ/rjHY14F9W9+Dd0wW0kN9cMbW
WwcA21OHEJNeod9ze8ujSCxuRE99Ho6fOQNPV1fEpGQiMykcu/fuR/PAuP75SwYASim9sjcgAEgC
WISD+UmUtU0ACxMoKyuDhfkx5FY1Y2hkDD0tJfhAFfiqxiZYWJijRxW9k2fO652+naUDikuycPSc
ExpK0mFu76+HSwCYUked4R4WcA9J1cOglhXpY4et+48iKi4RQxOzKlgUYs++Azh6ZJ/+RUE/h9NI
qexCaqAnwtOLkRnmhjf/9TpO2/ljem5eH0FKAJga7sa+nR8iICwc+/buU0fOgdi5fxcOHDiA06fP
4OzpUzh44jB2794JR1cfhHja4MMPt8DD0xMfbfkIVi4+CAvwwNa9u7Bj2yfIr+rA4lQvzM8cV9Ps
xnGzM7C1tcfZU2Z4f+c+pKalYe+27XD18cEhs2PwdLFFdGIeQlxtceTEcTi4eSMuPhqHVZtT1vZw
trPEibOn4Rngg3Nq227b+gnOWZyHvYMzDu7bh51HTqGwshHTUxOGAKCO0utKMvHhB2/DPzgc50+r
0GNurqYxh1egD06fPY5t23fB0toG5mq4lZMbzh49iU8+2QErNzc4OlvBzdNwhB4Q4I69+/bgqNlJ
2Nlb4oyFJbyDvHH02CGctXWG1emz2LNnL/YdP4Tdu3bCx8cfAUFhcHMyxylbF3i5OSG7sAQWavye
PbtU+PLUb5/9uaPIrO5CXWYk3v1wB0JCQrD5vXf0T1bK9R/ONmZIr2zDUGsJzlmew95PdsPWzQMO
NuY4fuoMWhkAKKX0qr1hXwF01NfAzd0P3s5uyMgpQGRkEPqmDN/v2xzfjn1n7FFc0YiMhHhYnrVE
kirOQoC3P0amJxEZ6A4rK0eU17fr4RIARscnUZEdh+NnHdHe1gw/1dZOFUbvqGTdpq0iA0/99S+I
zatCXIATPHwjYHf2FCrVOke42CE4LgXnzY4gLi5ZFc3D6BiZ0QXEeAZg3/6dqGltxelDh3Hm1El8
vPcIosLDYG1pjh0fvYcPdu5HRISapypGp85Z48CW93DotC0C/dyx++AufLD5HRyzdIKvuwuKqlUA
mOzGiSO78eHW3cjKLsb5EyfV0XwEzE7sx4nzlrA+7wBvf2/Y+wSiMDVU/36zuWr/2ttvIzSxAG3N
NXA4Z6lCgjeO792KD/ccQkVNNQ588hbe+vgYyvLzceSwGcIjQrBz12ZY+4br6x4MZwDmUZYVh7NW
5vhErZeEiLNmB7DrkBmqqsvVsFexea8lqoqK8O6rL+OMqz9SwoLwyvP/gH1IArLjfPHSq+/oUOFu
fxa5lTXY/vqTeOaVN3H0jDVqa8vw+nN/xn5zN8SH+anpnsU2FUKiI0Jx5qQZ0goq4eN8Fh7hiRhW
71treTre/WA7cnPT8NbbH6BtcBxWJ/YgsbQFxXFBsHQJ0e+hm+VxRKWW6e4gFyt4RqQhPzEI1o7u
cFNhx9XTDUcP7cWBI8fQwgBAKaVX7Q0LAMLi3DRGJ2aW+y6wpNrMqCPV8Ykp3T86Pqr/Xsr0zNxy
14prAKankZuWAlcXN6Rml6GmshiFFTX69HFpVrwqePaIiIxFQ0MT/NydEBGbpi84K8/PVWGiFS2V
hXBTR6VpORXqKHnq02sARgd71VF5KkZnFtBYWYCU9EykxobDOyAQefl5yM0vQE5qPNy9vJBXqAJN
WCj8PIOQlpmBuJhghIWEo7q6GmEBXvAPDUfP4BgmR/uRkZaE2IQk1NU3IS8zC2lZyQgN9EdObhGy
s5MQHh2LgtJyDPa2IcDHA55eQSivrICvtyt8giNRUpSLEFVUM7LyUFiUDmsVZJJz85Cu1q+pQQWo
tAykpMYg0McHxeXylYThDIBcA9DeWI38kmJkJCeiqLQM+Wq9CwtSYOXiiLS8fKRn5KCpvkGtRzZS
khKwf9s22HsGIik5GC6BQUjJzEbvwAgKclLR3DuCxtIshMSkoDA/AeddnFBYXY/clFjY2NojPbcA
aXER8A0IQGJKKrr7h1GSn4malk59YWV5QSZySmr1e5mZFIvKxg4UZKWgrq0XbTXlyCoo0+9hYVYa
qhva9UWFAz2tCPF2h6tHoP7aIz87EcERUcjKTEdKWrraxrwGgFJKr9YbGgDWEwkAhrsADFfES79c
JCcXr8kV/XLVuHzvvrS4oMZPGS6ym1NtZqb1leoTU1P6LoDxySl1lDyngsSkvhpdiqW+C0Ctv1x4
N6LnM6WDhszHoOGqc7lQT/dPGZY/tyDzmcbMjOFWRbmYT7dVy5S7COTMgsxTLoyTi+v0xYLSLxf/
qXWfkovt1Di5EHB0dMxwB4JaN8NyDMuTNnLB3afLV/3ijCxDzdOwbmqey3c2yHYw3gUgdy9MyYV+
ehmyPMPFhnoearoZ2U6yzmP9iAj0wFnL8yhv6sLS/LzhNcrdFGq7yEWB8nompmYwPysX+RnmMaX+
SriSuzBkfeTixyk1T3m98kGT6WSbyzrp5SzfKTCtL0Ic1dPKj1MY7rJYvgtArdfE8l0AcseGvC59
h4e0V8uXeRvW/cJdAPLZu3BXAqWU3txeWpuNmmwAkNvH5AyAFAYp2OuhzEvmKeu92nhRiszF/Vda
/vqt32pezeuX17TacKOXzmNIfWAGBvowMDisC60etmL8ag4NXWb4KsO+KOV9W+/PBKWUmrrGGnDp
2VGTDQCEEEIIuTJyllRCAAMAIYQQchPBAEAIIYTchGzIACAXi9Hrc6Mj7/9q632jXPko6pWs1naj
Sggh18OGCwB1dXWorKzUt8rRtVlRUYGGhoblLbrxkCvyS0tLUVNTs+r63wirqqo+8xmUbSbbbrX2
G035PyL/VwghZK1suAAgRaGlpQWtra3rant7u36hUny6urpWbbPStra2T9vLbYWiDDN2yy/pSf9q
0xqV8fJapa30y3KvNM162NzcvKGLg/xaY21t7We2hbxHso06OjouGr5yu8m04srxlyptP+89lvES
AOSOkZXIOsm2W20aozKtUVlPWWfjOOm/0rqtl/J/RP6vEELIWtlwAUB2wusdAGTHLAXRz89PP6Ev
ISFBF3FZDxknRV7uiZeiId2yU5dCEBAQgJiYGMTFxenpZKcfGhqKsLAwREZG6vWUechO3/jTutIt
G1TmK0eUgYGBSE9P1/OOjY3Vr0+mkX5R2q62ztejrHt9vTwmd2Mir/vSACDdTU1NyMvL00fhsj1l
W0rbwsJCPU7aSHdubq7ulvGynaXbGB7kr7wv0k7GybCVyzEuS46iLw0A8hm5UgCQ8bIushyZh6yr
zE/Wt6Sk5NN1MwZEWQfjOhrXRfqNQUH+ivLZubTNynBxqfIaZRsSsjaWcGLPRwhJr1zuX504f2ck
5F44mxgZ4Iiiug401lehd0Tt7D+PuQkUlhl+r+NaqC9OwzvvvofNmzfjnfe2qSI0tDyGrDc3RQCQ
HamLi4su/MHBwbC3t9c7+6CgIL0Tl+FpaWl65x0eHq533t7e3rroJyUlYdu2bXo6CQTyNyUlBadP
n9Y7fwkEcjo7MzNTF/iioiL9rHp5DTK/jz/+WM8/KysLjo7qP48aL+FBCp0oy5OiIjv91dZ9LZpi
AJAPoWzf8+fP6/dKtqmc5pbXIu+XhKmCggLs379fvwfy/sn2lzayraW/uLhYv58SuGRbSxGVbdzY
2HjRsqR7LQFAirS8t76+vvp9s7a2RlRUlB6ek5MDBwcHuLq66iAgy5Vp5Pct5LXIMuXzYFxXaSPb
Qf7K+ko4lSAgT1uUNvLaxMuFAGnDAEDWSl9tJv7n/7EJDz73ke5vayhBgJ8nihq7MdhWCScnJ+SU
NODMtufxx7+/Bw/fAEwvLCE+zB0Zefl47P7b8epeBz1tXJgPfEPjDD/VPjsMHzcXBIanIDPSAV/7
1u3IrapHYX6efnhXblYO2ru7kJEUAd/wOMwtzCM21Bv+EQnLP/sOBFnvxi/+8qr+7B9752n8/p/7
1NBZhPh5ISw+W7epKEqHl5szIhNydH9fc5le58LaTt2fmRQFdzd3tPQO636yOjdFAJACYGlpqX+R
T47ePD09ce7cOf3jO+7u7nB2dsaOHTuwb98+vYOXswPSXs4KyIY5ePAg4uPj9Q5fCpFsNJlGwoFM
c+jQIV1wPDw89BH/yZMn9XJkhy/jU1NT9XL8/f11gdi6dauevxQ6KXgMAIYA4OPjowu6FEzZhseO
HcPZs2dha2urt6cU2V27duniLdtawsDRo0cRHR2t3wt5n6ysrHSwk/dB/p46dUpvi5WFdK0BQD4X
so7y3stZIAkBEhzliVry/ksxFyTI2NnZ6UAgr0Pee/khJTMzM3h5eelu+czIZ0E+i/I5OHHihA6G
Mp3syGS8BB7ZVqutCwMAuR4s9r6LQ+ds8Y8n/4iqvmmc+uD3+Onj/0R2TjL+8OtfYr/6v3fknBNO
7noB9z/8Rzzzp4ex38YX2197FBZu/njmtz/B9rM+8Dr9CX78wG/x0M/uwYeHLXD4g5fw3BtbsWvv
EdieP4K7fvRT5ORm4vEHfo2m9i48/quH4OTjgu/d8u+w9o2B+Z631fx/j9/c9128uc9Gr1ushxnu
ffCPcFL/pz546VmYOaj/x9texq//8DTuu/s7OGHriWceux3Pv7kZjzz4ANz8A/HXxx7E7oP78PDj
T8DF/jxuv+W7eOe99xEQn6vnSVbnpggAcmQlO2vZcYtSGGRHLsVBTu9LMd65c6feYcvy5YhOCr4c
ebq5uekdtfz2vhypyTDjTjsxMVFPJzt5mb+EiuTkZF2I5OgtPz//0yNEOWqUswWyk9+7d68+ipUz
BlLApPB83unea9UUA4B8JmS7SoGUECbbWc68yPtlY2OjA4CcRZFCKUfVEgCksBqDlbynH374IT76
6CNdgGV7Z2Rk6JAgZ11WFtLrCQByZkgKtJwdkqN1ORMkZ4zkfZbPlAQC+RzIOkiAkeHyOZEgKJ8H
CZF79uyBhYWFDg2ynnKGSAKLTC/98hplW8iTCy/3f4EBgKyZxXE88oNv4+8vvYb7v3sLdluF4tzO
F2EVWobh0lDc+/A/lxsCxz94GmbeKcj1s8RrH5/Ex68/BveobOz84EXEljTgvSd+hT+9uBmnjx/E
8ROH8bOf/ArVY4Zph+oy8PBfX8bS3CAe+c0v0Tcyjqd/+wc4uNvjyb8YlvHMr76Pp17dCrOj+3H8
vIseFutxEj9+9Cm4OdngJ/c+gMpWFRx+eAde/ugAjh7YCVt15P/3Pz+OXtXW/cTbeOihh/DIU2/q
aV/9889xwt4fductsfndN2HuEKqHk9W5KQKA7PCNp4OlMEu/KKeM5eyALFMK5srlSsGQIzA5Gl05
TKaRgiJtZR7GU9By9CfzkMIiy5DlyXDjPKWwiDK8vLxct5G/0l6GGZexHppiAJCQJttQCqEczUtR
lcIpX7fIeyDbUUKAFHopvjJMgoAoF/TJtHK9hhRZ2bbyvki3DJPtsXJZ0r2WACAhTd4zWbZcgCfr
J6HE+D2+LEvCi6yLrKe0k3WTZcm6yPyNwVDCn8xDXousq8xH5i2vX6aX7s8LhbI9GADIWsgOsMDP
H/0b+vr7UJXmj189+Fu8/I8/4aRrEhYmOvHEA7/AOypM7zxuhb0fPofDjlFIcDqBN7efxpZ/PQSX
iCzse/cv+OuWwwiwPorH//I89n+yHaEp+TDf8Qb++LdX8MpbmxGfEIO77vkuotJz8cpTj+C551/A
v996Lzz8XPDHPzypT/l7mm3H4397CXu3b4VfTJ5ev2DbfXjq3f262+nAW3h+81E4HtuGp195D7u2
bkVqXhH+/sj3VIB5G4888jtEJ6fi5f98DG+99w4e/ePTiIhNwNYdn+CV/3wQf3nNMB+yOhsyAMgO
TnbS660UHim20i07V+mXvzJMlO6V7Y079pXDLx1m7Ja/xvlIt/E1GNvJ35XTGNuK6/16pTiYWgCQ
dZbtIh9G+epFhskRt5w9Wbk9ZbxxmFHjNpdxxvdYlG6Zh3EZRmU+awkAso7GZcl7KespQUWGy3hZ
L1mecV2M6yZtV37WZBoZL93SXobLMOlfOd2ly18pAwBZK50NtWho6VnuA6orS1CmAmdP/4juH+9v
RVRkJBo6BtDfpf5f9qmC0N+FlvZutDVXqyP5KYz0NiMl3fB9fFFWAiKj4zE6I/v0BSTHRSM1twyL
S0BpfjpqWrox3teJhLgEFJVVY3CoX/1fq//0O/+89DhExiRgZMrw/3FIta1rXv5597F+lFZU6+6M
xBjEJqVhdmEYT/z6hzhu44viylY9bnKwXa9zS9+46ltCTloc4hJSMLV6mSHLbLgAIEdIsmOTnTFd
m3JkKUeeGxUpcLKOxkJ2o5XlylH3pQFA1knOMqw2zUZTgoqEGEJuPsawa/OHaOTNAdfNhgsAxqM/
OSqia1O2nxxZblTkAyenuCXofRlKoZe/l34GpfhLcLq0/UZUiv9GftgTIWTjs+ECACFfNJd7DDAh
hNxMMAAQQshNwvT0DBoam5GfX4ic3PyLzM0rQEurXM8kD+FaYdcl/Zcbdunwrp4Lrmxzta6c7qLu
FcPWOu+b0OaWNgwPG67zMLLhAsDMzAxmJ2YxPzm/oZyemMbs3OzyWhJCiOkhASArO0ffkpyXl6/v
SDFqfKjZ550gu9aTZ3OzM5j/vGO9FfP7zLwvGrf6go2D5S/9fMfHJ9DdIzdPXmDDBQD5DjatLA2J
5YlILk/eEMq6pBeno6mxaXktDQyoDdcyNITWqakNZcvwMPp7L36jh4flnnJ57LBqcwNtaRlDT0/3
8loYGB8fR0dbCwY629D/JdjbYbil89KdSl9fL1r6h9E6qtZ9g9syMILe3gtXchNyNczMzCIjI1Nf
SHopcueJ3OZsZG5+AU3l+UiMikZ6SpYq5Ib/L03FyThu7qq7BcN/oyUsqF16YXIcqpsM+57UaE+4
+gXD3cEZJTUdetjs3Jz+K8x9ehHuIuZkYuman1PzWUJ1QSpsrexRWteA6tI8nLO0RFVbD1qqCmFu
4aHWZQE5ieGwd/ZCY+eAnpZ8PhMTk+jt61/uM7DhAkBLXQueL38edxXdhfuK79sQ3lF0B7aVbcNA
y8UftOrmZjRbWKBny5YNZevp06i85AKxhoZO1Nc7qGKs2txAOzsPo7y8Qr3fF4ptd0c7UouqEFTW
jdDSzhtqcGkXoss79JHOwsLFdwFU1taj1fM0ek6rdTffwKr1a3M/iYpq3gZIrg0JAJmZWfpC0kuR
Z6KUlpapKjyLxLAA2Lu5wMHaCoGurji+exfs3b3Q3t2P1ChvbN93DD1jE4h2c0RYRBRC/b3h7u8D
88MHcPz4SYQnpMHb2xp5zQNozI+Br38kctNi4eDshtzsHLhbnYONiweKVOCICfGGi6c/stMzYGdp
jcT0QjS3tmOgtRLHjh2Eo3sAmhtqYOsaiMmxYZw8bo+mpmoc3LUTjm5eqGq9+GCHrI7JBIBnSp/B
bQW34Z7CezaE3yz4JjaXbP5MAKhTR//jv/kN1JbZUE7fey9qLzkD0NQ0icHBZ1WXanMDXVz8N9TU
NKi/qneZoZ4OhKtivKMQ2Fe4eFUeUAcm+5WrjbsWdxUs4XTJHKqqq7F4SQCo7ejB9Bv3Anerdf/p
BvaeTZh9+U7UtBqOqgi5Wq4UAMqrajHTUw8L2wAdBAJcbOHt6Ijo2Gx0VhfAxdEJZmbHYH7qCNyD
ohHh7Y3okHD4hWdhZmoI1ieOo7qqHn6qMFvYnoSDtz9OHz+BivJSbP94OyJCAnHy4F64e0VjcqgD
7z3/EkIzGzBYn4/TR81w9tRZuAWEYnxyQh3pn0ZSlgoLLr6YGh2EpZ2PXk9nBz+UFmbC0tYbuamx
cAtL18PJ52MyAeDZ0mdxR8Ed+GHhDzeEtxbcio9KPvpsAFCvY/T3v1d1Tu2UN5ATv/41ansuPj3c
1DSu3uhXVJdqcwOdm7tDBYD6iwLAoAoAkaXt2F+0iKNFc1f0eOkCDmSNKEdxqho4Vjyvhi3hWMmi
7j5RDphVYtVpL/Vg4TwsS6dXDwDt3Zj44NfAz9W6P7KB/cUmTL39E9S0GB6WQsjVYgwAq91CKl8L
lMnZuqlhuDnYwTcoAPZWVojw8cbZw2YIj4yC+QkzBKgwMDHWB8vzp2Fn447aijK4qvb+IQGwPG2O
psZWBHsEwMbDAW0TQEN2NDx8ghHg4Qg7J1eEhQXD/NBJBAeFItTHF15envDy8EBcUhaiw4Jw7tQ5
7Nu9FVuPWaKlYxCx4YGwsbNBeKo8KXAR9taeGBjqgbuznQoDzkgr4Jmwq4EBYI0yAKzd6w0AUuT3
Z/bjr4dc8J53Hl53jMPBnHHsSenVf4+VLGBLSCVec0hS3WoaFQhWm49RBgByMzM7O4e0tHT9Oxny
zJWVyuOo5fHnwuRoH6pq6zE1NY3pyUk011ahoa1TFf5xTM8a/jOPDA2ogjKouwe6W9GgPo/TU1Pq
//wcJsYnMDo2itmFJX0mYWhkHPMz4yirrMZofzPszM6hps5wTdVgdwtqm+Vs1gKqVJgYGJ5AT2cb
Gurr0Crf7y/MorJK/X/VrRcxOmL4sYGp4T7U1F98XRa5PAwAa5QBYO1edwAoXsChvHG8YhODj0Kr
8Mhb+/FJTDOePe6FZ4564O/HPPGnbefw2LuHcLx0Vp8RWG0+RhkAyM2MFIHm5hYdAOTHrOQXNkXp
lh+ykn3zF87SvCo8vKPqRsMAsEZvxgAwN7f68Gv1ur8CkIJeOI0P/Uvxt8NueMkiHNui6vHkbmv8
5uVt+OshZ3wS24oXzoXgRJm0v2T6S2QAIDczw8Oyox9d7iM3EwwAa/RmCgALC5vU0cAmBAZuQm7u
hWHG8YuLF/+9kutxDcCx4hm8652vCn0LdsS1aTcHlmNLcAV2xLergDCrvwaQ6wR4BoCQyzMyMobB
QT5E/2bE5ALAvSX34kcVP1q1KGuLLu7+UeWPcG/ZvYb+gh/i3tJ79Tw+7S5X81Ntfli8YroV039m
2LI3UwBobd2EyEhDd2LiJnh6boKb2yYUFW1CePgm+PltQnz8JtjZXQgIn+d6BICjRfP6Ij+52O9E
GXC8bEn362GqX84SnKyQiwMXVpn2YhkAyM0MA8DNi0kFgO8UfQf3pN+DO/3vNBRvVdjlry7yxYZg
IOoCr4r3D/J/gDvc78B3Q7+rh/+49sf4XvT3cHfi3biv/j58L+57+G7Yd/Edn+/gBzk/MMxTzcc4
T2OxN4aIT4ersHC1AWBKubTcfSWHlPMr+kdX9I8pZ5XSxjj+WryeANDdvQmhoZvUe7QJycmbYGGx
CRkZm+DsvAnHj2+Ck5PBiopNCAhYfR4rvdYAIEVdivnKYRcd1RfOqQCg2iy3M6sCjhTMfdotSrex
XwcENY1x+nUJAI8qf6t8bIUyzNhtbHdp/6XKNKsNv5IMAGSNMADcvJhUALiz/E7ccvIWfNvx27jF
7Bbc7nI77klRgSDoTnw/+/u4M+BOfH3X13WRl4J/m/Vtus13fL+DuyLu0sX+2w7fxp2Bd+KepHvw
zaPfxNc+/hq+eeKbuDvubh0Cvp/+fdydcLeep55v5vf19MbgcIfHHbrdrYVXDgBdSk9lmTJPKcOG
lRIIRCnqMmxOmaEMURYpx5USHKKVUvClXajSeXnYypAg3SPK7uX+weW/i0rj/MXrvQagpsYQAtra
NiEoyFD8OzsNZwHkrEBDg1rXoU2or199+pVeSwA4UTaPf9nGKuP00bzc8ncgcwSvOyXjTJ0q6uXA
6RrorwJesY7Ge975eNUuHhYtwAf+xfjn6QB9YaBM/45nLp476YvtUY1qvheWc90BQBX0nl9vgv/d
m1D+U/Ve/li9l99X20QV5Ro1XdQP1Hv0gApwqrin/khts/vVNJcJC3MPG1w57NPu1ZZtlAGArBEG
gJsX0zoDUGwoxN/x/g6+sfsbuMPtDtzudju+tvlr+PqOr+Obx7+Jr3+iAkD89/SR+38c+Q/c13qf
Pnq/5ZQKDnbfxn/s/w/c7nQ7brW6VYeIr239Gm61vFX3y5kCafPNY9/Et85+C7fZ3YbbbG7DrefV
eOW/b/t3PU5CxO2Vt18xAPQq45UlyiPKKqWPMmn5r7eyTSmhQAq8TCPd/kop9GHK4uV+e+U5pUyb
puxRpitlPrKMTKW09VImKt2VEj46lOsRAFba3Lz68Kv1WgPA7z8yw79sYvT3/M+fCcLbHln678fh
1bqwv+6QgJetovRtfzLugZe3qWnH8YePTukLAWXc9ugmHQaePxOs/0qQWLcAoIp5wU82IVAFgMB7
NsHxzk0YfVC9TyoInL1dvQ93qfdV9Y88tAlO392EJhUWKn+2CcGqbYUKDGEqLOSr6Zt/qd67e9Vn
Qv2NV3+rVZtSNV7mOaQCxOeGAAYAskYYAG5eTCsAlKgj+ei7DAX6zLdwp++dunD/2xv/hn/f/u/6
yP12x9v10b6cqpczBXIWQAq5BAAp9LecuEUfxd9qcSv+4/B/aCUsyDTS/Y29Klio8d/Y9w1d9G93
vR23nLkF3zL/Fm41v1UHkNtsb7uqADCjzFK6KqVAy1G+FO1ApRzNS+HOVUo7OfpvUaYoY5VS6N2U
McvdTkqZz7QyThmhdFFGKv2W/8owWYZMF6WUMw/Svx4BQC76E6/2Qr/P81oCwPGSOTy5xxbbImv1
RX+Pf3AMj71zEL9995A+0n/0rf14crcldiZ24A3nVH0r4MvnI9Uwe1383/XKw+vOKdib2o+/L98m
uDu5Rz9IaD0DQKE6qpdiX62KtxR2KdZyJkCGpau/U6r4L6phTapQx/xwE8y+vQk2KijYK5N/pMKh
KvYnblPvrRongSD6B5vQrYr+4Vs3wfIOQxjQZw1WW77IAEDWCAPAzYtpXQRYdAfuSbsH34v9nv6u
/p7ke/Qp+rvj78YPsn+AH+b/UJ+el68F5Pt6uQ7gu0Hf1afuZbq7ou7SF/9JwZewoKdT7WU6uW7g
e1Hf0+1k+N1JalyeGqfmcVfkXXqeck2BDLvarwDkO/tUZZ+yXilnBBKUTUo5opdiL22krXxdIIW9
QZmvlLMG0l6+DpAj/kKl8WheTvlLW5mnfGVQrZQzAnLKX8JDs7JfKWcTjF8JrDUAVFWpefeoI9FS
w6l+OeUv3/9nZhpO+ff2qvUZ+ex0nxcUru0agFm845WLM7XQV/jLrX7Pnw3GO545hlP8pwLwilWo
PsKXswJvOKVgZ3w73vbI1l8LyJ0A4r6MQbzvV4TDBdOG6wnW8xqAxwyFveNXqvv3mxCuineACgEl
KhTIVwKT6uhfAsGcaivFXgJBrpwxUIW+WLWRI/5ZFRAkRLSo7kY1r3A1Ts4SSNsgNa9RngEgXxAM
ADcvphUA5DbAYsPV+1KYpWjri/bkAj31V1+1L+OXr/LXbcrVOGknyt0A0kaGywV/Mp8VV//r+Ug7
4zhj2+Xhxv5ruQjwckpxX234F+VaAoDc929ruwlRUZtQULAJERGGwi93BMh3/sXFm2BltQk+Pobx
cl1AWdkmeHsbgsNq8xSv9SJAfdGe+itX+svjfuViv0+v/i9dxJGCGf30P1GKuzwpUMbLOINL+qJB
uVBwtVsC1+0iQGOBVn8X5Xt86Zfv71drq4YvGdsYpzN+13+JS5dOv5oMAGSNMADcvJheAFgu1l+2
N8NtgDk5m3DunKHIOzpuQnT0JmRlGc4IyIWAcsW/hIHKSsOdARIW0tMNtwlKu9XmKV5rALhUKfTG
K/tXG2/0+HIQWHm0v5rrEgC+bBkAyBphALh5YQBYozdDACgvN/yVMwGxsZtUe8OV/3LkL18D1NVt
QkfHJhQWGo745UxBV5fhb3X1Z+dn9HoCwLGSeRzMHtOn8z8Oq/n01j8dBtTRvf4RIBUOJCTsTR/A
tsh6nCj7/GcBMACQmxkGgJsXBoA1ejM9CGi9vZ4AIFfvv+2ehT9tN8eWkFLsTGjDx+G12BpRr8bP
6kcAy2OBdyV26nZyQeCpms8/U8AAQG5mGABuXhgA1igDwNq93gDwllum/iXAI4Xj+OtBF/x5lxWe
2HleXxT4hlMCfvfhCTxzxA2v2sfrWwNX3vK3mgwA5GaGAeDmhQFgjTIArN3rCQByel/uAJDb+bZG
VOkC/6Zrur4lUJ4B8JJlBB5+fTf+ss9B3xEgtwYyABByeRgAbl4YANYoA8Dava5rAIrncShvUt/a
ty2qUXcfyp3AwZxxfYvf3rQB7EzoUP1jOJg7rsfxx4AIuTwMADcvJhEAWuta8UTJE/i3/H/DbQW3
bQj/V/7/wjvF72CwZXB5LQ3UDQ5i7NFHVZ1TO+UN5ORPf7pKAJhQ2/0F1aXa3EDn529ZNQBEqACw
p3AJh1RB/jwPFy/imFz0Vwbd/alFCzhSsjy8ZOnT4avNY6X7ChZwrmTmcwLArwB5EI/ctrdRVQFl
6q37GADINcMAcPNiEgGgtqoWx8uO4+2St7G5dPOG8M2SN2FTYoP2hot3uLW9vRj5xz+w8G//tqEc
f/JJ1HR1La+lgcbGEfT1fYiFBdXmBjoz8ytUV9ddFAD6u9sRW9aGU6XzMC+duaGeLpmFU8UUqqqq
1PpdEgA6ejD97k+BH6si++sN7H2bMPv6D1DT2rG85oRcHQwANy8mEQDa2tvQ1diFgeYB9Df3bwhl
Xdrq29BzyVF1Y2MjKoqLUV1SsqGUdaqvr19eSwNtbW0oLS1SxVi1uYFWVcnfaiwtLS2vCfR2LJb1
rKpRVt94K6tQWVn5mc9gZU0taqP90RTgiKbgDaxav7poP/VaqpbXnJCrgwHg5sUkAoApsaRew5yo
ituGUq3TpdtXCvDc3IJS/t5IV1+X+fk5LHxJzs+pvwsLy2tzgfGxMfSNT6F/en7jq9ZzbGx0ec0J
uToYAG5eGAAIIeQmhgHg5mVDBgA5jR4ZGYm4uDhKKaWfY3x8PJKTky+rjO/s7NT71tVgALh52ZAB
ICIiAv/1v/5XSimlV/DrX/86ysvLUVtbq69judSysjK9Q78cDAA3LxsyAMTGxsqMKaWUXsGvfe1r
GBsbw+zsLCYnJz/j+Pi42tFP6H3rajAA3Lxs2ADwX/7Lf/nMB51SSunFfuMb31AFfFAXedmXShiQ
om/ctw4NDen+y8EAcPPCAEAppSbsygAgdnd3o6amRhd92YkzAJDLwQBAKaUmrDEAyOl+eZ5GVlYW
0tLS9IOt5GwAAwC5HAwAlFJqwhoDgOy4peg3NDTofWpBQYHekQ8PDzMAkFVhAKCUUhN25VcAcrQv
R/2iFH6RZwDI5WAAoJRSE3ZlAFi50zZ2MwCQy8EAQCmlJuzKALDavpUBgFwOBgBKKTVhGQDIWmEA
oJRSE5YBgKwVBgBKKTVhGQDIWmEAoJRSE5YBgKwVBgBKKTVhGQDIWmEAoJRSE5YBgKwVBgBKKTVh
rzcAyH53cXFpuY/cTDAAUEqpCXu9AUCzNIu4yGA4OtjDzScI8zJsehj+3p6wt7dHVFK2bmYkNz0B
Ls6OapwdUvOql4cSU4MBgFJKTdj1CABLI82467u34ri1I3a8+Vf85V+7UVOYgNvu/jGCg4Pxm/t+
AKvQrOXW8/jdb36A9/adg5erLb5/x73IbhxTgydQVVVtCA/q38H+blTX1GJB9wOD3c2oqW9d7ltC
fV0NOnoHlvvJlwEDAKWUmrDrEgAG6/GbRx9Fj/4mYA6/feBnsHNywv2/+CWcnZ3xqx/9FCE59bqt
FPe//PEBWAWkoLm5Dn968GGEJWbjvRf+jBdefB5/f3M3slP88cN77sBTf/4D3tpzDsVpUXj0oUfw
xB8ehaVnGM7vew+PPfEM3nh/K9oGp7C0tIT5hQUs0BvqyMgount6l99XAwwAlFJqIq5LABiSAPAI
2mcM/X/+7S9gbm2NXz38GOLi4vDRq3/DzrMehpFYxF9//3M88+r7eFa1+9cuW9RmBuF//P++jd27
d+HxPz4Ji1O78beXN6u2c/j9oz/HY6r4nwkqBvpy8fOHfgsP+/N4+aVXsefwObSrADA7O4eOzm50
dvags4veKFtbOzA6NmZ4W5dhAKCUUhNxXQLAcCO+e9ftcA2Lg/Xh9/DQE2+gKDMKd9z7c+Tm5uKD
fzyAFz86sdx6Fg//5seIqRoFplpx/32/RmBwAO7/wX2wd3HBWQsnxAdb48f3Pwpn29N4/C8v4tT+
bfjTPz7AuYPv4MkX30VcZCBsbC1xy//8v+CVxGsINhIMAJRSaiKuy0WA85NwsjmHw4cP4fipcxgY
m8XCeA/Mjh3FoUOHYHbeEWPThm/35QxAcKAPajuGdV+knytKGrpRmham23qFJaMw0RV3fvcn2Lv3
IApr5RTzHJwsj2HPwZPoHZ9GZXYsDh4+ChefEEzOGq8SIBsBBgBKKTUR1yUArDM5Yefx0tsHlvuI
KcEAQCmlJuJGDACzU+MYGBxZ7iOmBAMApZSaiBsxABDThQGAUkpNxOsNAHNzc+jp7UdHZxda29qV
HZ/a0dGFvv4B9PT00a+gcifA5OTU8ifBAAMApZSaiNcbAKamppGTmwdvbx9ERUUjOjpGGxUdDU8v
L5SVles2RucXFiGPC5D9tfTPzBovDgQW5ucxO2fYjwsSLlYyOzt70byu5MLyE4plPsanFc/OzH76
cKGp6eX7FhUzMzOrzoNe3v7+QT4HgFJKTdXrDQAzqqBmZGSgvt74oJ8LtLS0oLioaLnPwEBHEypL
S9Hc1KH7l6YHEBzoi7DwKLQNjGFqqA3+wSGIjEnC2Ng48jKiEBEZiYiIxGu+4r+hPA9BwdGq0E+j
oaIAfqERmF2YR3NFEVKzynWbkqxkRCSkY3LmQhAhV4cc/fNJgJRSaqKuRwDIzMxCbW3t8pALNDY2
oqSkRHdX5qfBOzAQ/m7O8HFwxMm9exAQnYiK4nScdXRCT3cHXF29EBXpCyvvQMQGuKt9eRIcnM+h
Wy0/1tMGcSlFqCpKR1hsCro7WhHq7YrAmGS9/nFhfohLz0dXewvCgoJRWl6D/JwcZCVF4pzFGQQE
RSA2OhShKYVoyk/C4dPe6GgqxpGDB+Dg5oeuQVVoyDXBRwFTSqkJ+0UHgPLKGswOtOK8tQda2xrh
6WCDAFdX+PuGozgnFafMTiIgIUG3DwpwhYunI05Z2SE40BvJubmwsTwI3+BA2No6ojQ/E7t2H4S7
kx1OqsLt6x+D4qx4bHlvKzJK6pAZ5Y9j+49gx84DSMqr0PO0szsPDy9vBEVkYKS9Hva+ycD8CDx9
45CdGAprR1/4ebujoK5LtydXDwMApZSasF90ACirrFb1tgtWVg7ILciFg+VZ+Dg4wP68CzKTE+Fs
Zw0LVxfU11bCxd0bSQkhcA6LQ0NJKhy93GHvao0eVTx87KwQERGJE8eOwcXNHS4OdvD2CEFOcixO
HDyGiMQ0hHm7ITohC/5u1jhpdg6HDu3AYQc/jI/2wN3NE0GBPojILMfScDvO2wWhqSYPLt4BCPJw
Q3pZ2/Jak6uFAYBSSk3Y6w0A8hz+tLR0VFZW6n3wSiUUFBQU6HattcWIjEtAfX0jetpakRQRhqSs
IsxOjyMxNhJR0XGq0E9idqwbEZFRiI5JwvDYJJqa6yB79oHOZjS2dqOjsQyxabmoLkjB4R0HkJFb
ioX5OWQmRSKntBZDfV2IS0hEc2MLYqMjkJaejpauIXQ0VyMiLhFzi0tYVMusrZNfFlxCUVYyUrOL
9IWJ5NpgAKCUUhP2egOAXA1eWVmljs4jkJKScpFhYWH6QsAvgunRfnT3Gh4nTL4cGAAopdSEvd4A
MDwsO/rR5T5yM8EAQCmlJuz1BoCRkTE1/dByH7mZYACglFITlgGArBUGAEopNWEZAMhaYQCglFIT
lgGArBUGAEopNWEZAMhaYQCglFITlgGArBUGAEopNWEZAMhaYQCglFITlgGArBUGAEopNWEZAMha
YQCglFITlgGArBUGAEopNWEZAMhaYQCglFITlgGArBUGAEopNWEZAMhaYQCglFITlgGArBUGAEop
NWEZAMhaYQCglFITlgGArBUGAEopNWEZAMhaYQCglFITlgGArBUGAEopNWEZAMhaYQCglFITlgGA
rBUGAEopNWEZAMhaYQCglFITlgGArBUGAEopNWEZAMhaYQCglFITlgGArBUGAEopNWEZAMhaYQCg
lFITlgGArBUGAEopNWEZAMhaYQCglFITlgGArBUGAEopNWEZAMhaYQCglFITlgGArBUGAEopNWEZ
AMhaYQCglFITlgGArBUGAEopNWEZAMhaYQCglFITlgGArBUGAEopNWEZAMhaYQCglFITlgGArBUG
AEopNWEZAMhaYQCglFITlgGArBUGAEopNWGvNwAMD4+qNsPLfeRmYmpqGj29fct9BhgAKKXURLze
ACBHgc2tHchIikZKdjHqq0oRGBSJtu5+TE7PYWZ2HiPDQ+gfHMPs3AJGh4cxNDKBmZk5TE9Noaen
F11dPWhvaUJyagZ6+gZQkJmG1JxijIxNY2hwSP+dmZ3DrJqmr7cfYxPTmFbdU1OTqgANYGp2AVNq
/UfHptSyRtA7MKyXOzMzi351hDqihsvyJicn0d3do5dHr9+m5jZVey8++8MAQCmlJuL1BgBhorcG
P7nrOwjPa8JoXyNe+cdLan89ANdzB/D2228ju7ITjWVJ2PrR+3CLSkdtYQp27t4DS9cQTKriPTc3
j+HGPHz//p+jpbsbHz/3B2w55Y5IPxuk5VcgIcwF27Zuwda9RzGoAkSwux327tsPK5dQFSi6cfrw
duw9Y4cAP0eEJ+dipLcVh/btxL5jFugfHkd6tC/27N4Fcwdvtbw5vTx6/c7Pzy9/Ai7AAEAppSbi
egSAxlQf/Pxnf13uM5DsfgK/+O0/EOJvhd8++SJOH3gLP3vsH2horcEv7voWnn7+BXzt//4fcI4p
1u1ne6tx13e+hdfeegu//NGP4BtfiC3P349znhF448kf4v19p/Dkw7/A+cAk2B3eiVdfexn/dusP
ER4Xgh/cdgsS8qpw+L3fYvMRcxx862/4yWN/xs+/fxte27ofzz38M/z+mX/hjK0nppf04sgXBAMA
pZSaiOsRAMY6SnDvnXcjr3UMWBrH4f0H8PEbz+P5T2zU2AE8+PAj2L75VXx81A1Y6MY3/tf/xglb
V1ieOoH04no9j/HWAvzkwUche/GCEDM89uTzePdfj8PaNxwf/OP3yGgYxqn3XsHu4xZ44cknYWFt
hTu//X04eTvjz3/8s57H2Y+fwLajp/Di47/GPz84CGc7K/gERyM3KwVnTuzHo4/8BY1907ot+WJg
AKCUUhNxPQKAEOp6Er/7/Z/x0jNP4MUtx9DSUI6///ExPP3k4zhsE4hgp0PYethRtVzE6U/exktv
b8Zbb25GTeeInn6uvx6//sWP8da77+LPf/ot3IPicHjr3+EWloD977+A1MounN+5GeZOPnj/xb/g
/fffwX33P4KgqCC88vxLkAN7+0Mv46CtD3IivfDks//E26+/gZjkDJw99Am2bHkff3zqebQOz+jl
kS8GBgBKKTUR1ysACOMDvWjv6FruA5bmxtHZ2aO7F+dnMD0zq7uFro52DI9PLfcZGB8dRmtrK3qH
DMubnZ7E3PwCZmemsbC4pPqn9RkCLE6jo6MDk1Mz+ntoKTrC3Ow0pmfndPfIQDc6e5ZvUZufQnt7
Oz77jTVZbxgAKKXURFzPAEAIAwCllJqIDABkPWEAoJRSE3E9AsDCwsJy12eZn1/Q9+PTr6Czs1i6
5K4KBgBKKTURrzcAyNPgyiuqEB0di+iYWMTExGmjlZGR0aira0B3dy/6+gf1Q3+6e/pV94Aedqk9
alxvb9+q4+jGs7m5TRX7weVPggEGAEopNRGvNwDIkWBmZhaSk5PR0tKC1tYLpqamoqSkRLebm7tw
AeDs8oV6xLSRYs9HAVNKqYm6XgGgqalpecgF2traUFpWrru3vPN3JNcOojkrFK++cxjjI4NobGrW
4+YmR9De0Y2i9DC4h8dhcmwI7d2GwtLf04XxSd67vxHhjwFRSqkJu14BoLa2dnnIBRobG5cDwBKO
HnwbVl6B8HOwxu7DDigrzIGnsy28/P1hceI4vIOTEBXsjANHj8Dd1RmOzq4I8vLEuRMW6B0cNcyQ
bCgYACil1IS9MQFgFm7edrA4dQxm52zg5uKP+ORkBHq7Y//h84gMCsBZC0sEhgXA0vwgdh86gzA/
D5w4uB/hEZmGmZENBwMApZSasOsRADIyMtHcbDidvxJ5WE9JaZnqmkOAKu4dfX3o72pHuF8gbJzU
Ub6jC2wc/JGdlQIHG2fExsXAy8MRQf4+cPENQZLqT0rMMcyMbDgYACil1IRdrzMA0dHRqKysvMiY
mBgUFxt+7OczLM1jeMRwan96cgxjk4ZH9C7MLypnMTKudvxkQ8MAQCmlJuz1BoCxsQnIb+zLVwDV
1dWoqan5VOmfmrr4cb/kqwMDAKWUmrDXGwBGRsYwPGz4QR9yc8EAQCmlJux6BIDBwaHlPnIzwQBA
KaUmLAMAWSsMAJRSasIyAJC1wgBAKaUmLAMAWSsMAJRSasJebwAYHh5VbYaX+8jNhPwQFH8LgFJK
TdTrDQByFNjY1ILOrh56k9nU3IaBS87+MABQSqmJeL0BQFhYWMT8/Dy96VxY/gRcgAGAUkpNxPUI
AIQYYQCglFITkQGArCcMAJRSaiKuVwCYHe3EgY/exptvvI5PDltgdOazp4evRGd5Mp557iX0XMXT
g8tSfXHSyhE1JanwC4teHnoZZseQmJqhOubg4WyJ5j5VVK7E/Ci2ffA63nrnXbz+5tvIrW5dHnGt
TOPkwQNQNe+mgAGAUkpNxPUJAEvY/8af8cTL29Hc1IDXn/4TXGOK0Vmbj2PHjiE6s0IV1DH4e9jB
2iMQ45Nj8HKyhI2LLybnl2ehsNr7Ov5f/8f/CevQbNU3h+gwD5xU04clFWJhdhgB3o56ftkVbUj3
PYiH//I8qouS4BMep1ZhDp6O53DshAXae/uRHheK81ZWSMquQHWmD/77//O/EZtVCh8PG/RMAK3l
GXpe8bk1WJwZQkiAJ06ePIHkfPn5YsVoC+798Q+Q19SOY2//FX//yAxN1TmwOn8OqYXlSI0N0fNP
zqnG7EQfgv3Vup44ifQSw88ih/vY4/gxM1TWV+Hph+7D6x/th7NviB7XVJoBS0tLJBfU6R9FCvNz
w9nTZ1HZ3KPHmzIMAJRSaiKuTwAYwaPfvw+pdWPL/ap8D9Tjofvuw6nz5/HQg4/A09sJd37zG/CK
zsTxLc/jRw/8Dr/60bfx3JaTuv3CWCuefOpvcHWwwON/fRvzc4P43i3/X+w9ehIPPfQYPDzt8Z1v
fx0nTh7FQ3/4G1xsD+Gl97cjwG4nnntvOzxO78VjT78K87OnERKXBLOdW/Dqv57HLd//DcKjAnDv
T36K/JIS/P6huxGdnIY//OoXOHPeAg8++JhaNwfcecc3sW/3Nvzwl7/DsJSS2V787Ed34kV19P/A
j++FQ0guzn3yFH72uxdQXFGBA5vfwWsvPYtb7/sdEuN98e1v34J9Oz/Gb554Eb6OZ/Grh/8Ma0tz
FU4i8dfH7sZbH+/EL3/2c3iFhOOhH30Xz/3zn7jlO9/H+XNm+NbX78B7H25BSHKh3hamDAMApZSa
iOsTAGbx7IP345SPnGYHUsP9YHv6AH7ywNO6f/MLv8M7Wz7A3/7+ku5/9lffx9Ov74C1+SlYOPro
Yfmh1vjGt+7Gm2/8C1/733ciLj0FT//pT3rc5hf+gPc//hD/ePFd3f/nx3+DT7a/jZc/2I4Q5wPq
6Hob3n3uLzAPLdHjx7qq8Pcn/oJz5qdx6+0/RFRSIn7/9HOYX5zGn393H5zsrPDzh5/Rbd9+5lG8
99EH+MdL72Jxsg8P/+wxtMlZicl2/PqhB9Cs6k9Tpgd+++Sz2PH+CzjjnakW0Iq//ukvsDh3Erd/
75dw97LB319Q04914i9/ehavvfgMNp8O0vMHhvGfD/8CdYNz2PPKC9i2cxdu/9adOO/giEN79yA9
twBe7i748I2XcPC05/I0pgsDAKWUmojrdQ1AWWogfv3zX+CjzR/gxz95AIk5+dj6wlN47qWX8PhT
LyEtKRR/+tPTkL10hMNR/O7pf+Dj99+Fb2y+GrKAN596DCfcEzA7OweLXa/jmVdexUP334m///Ml
/PHpN5CbFYXv/Md/4IXnn8M/3zmIKN9TeP7drQhzPYiXt+5HbpQ3fvXAo3ju+Rfg5OyI/3z0QWzf
tlkFgPuQVlCAn//kbjj7B+JvT/wS2RUN+ODZP6mi/yL+8NdXkRIfgKee+ReGuhvx+AN/QocEgLle
/PL+e/Dutl148ZnfY89pOxzf/jKOOSdgurcSv7r/fnyy9X3ccc+D8PV3xLMvvIOhjhr85x//qV5r
GB791a/x4vPPw8bDGy8+/QcUNQ9g6z+egUtYPD568Wl8tHsvtu85juTEeLz/4ft4+YlH8crW07Ip
TRoGAEopNRHXKwAIo73tyM7ORt/o8hVvc+PIy81F/9ic6plHR0eXDgBCQ1URcgtKMLskfQtoaWzG
7PLIhdkJ1BZE4hc//glCU9T0I7PoKg3Fffc9iOy8PEypAr04M4ruvn5MjA2iq9fwONrWulLkFVfo
7pG+FuSpts2tHerIfwldLbVobGlDT3cHZG0wb1i3wUm5WHFWP9hmcWEOnWod5/U6LaGtqR652VnI
L62WARgd6MbAyITuHlBhIS+vAK3tPWr7jKKnpw+L87PoaO/S4/vaa5GbV4zZ+UX0dndiZn4B/d1d
hmse5seQm5ODxo5e3bauoggFRWW629RhAKCUUhNxPQPAujLdjUP7jkDt/jVdNZk4cvz8ch/ZqDAA
UEqpibhhAwAxSRgAKKXURPyiA8DSkuFRwWtR9umf9qvui/rpl66x5q6EAYBSSk3E6w0A8otwNbX1
SE3LQEpKGlJS05dV3apf/1BQZ/cFu3rQtezKYd09fRcPu5wybXfv6uOWlfF6ft1XMT+jl67TKur5
Li97ZffKaWXYNS3XhJUfAxq85JcgGQAopdREvN4AMD09i6ysbERHR6OiouIiY2JiUFpautzy8xlT
BWP9WNLz09fyrStLmDdcIYilhTnML3x2CQuzM59e6PhVZ3Jyij8HTCmlpur1BoCZmVlkZGSiubl5
ecgFOjo6UFxcvNy3gNGxCdQWZiIqKARxkfEYm5xWw+cQEeQDT09P+ARFqlaqsIyPYG65ikpBWVpa
wMiYYR3GOyvx8fb9GF8eP6YKi/Ghw7K+QrCPNUKiouHl4YuB8XnMzU5hempyxU/XLuoCZUDWaxw1
eSlISsnH9PKCx0aHL8x3eBjTYwMI8XaDs5sfKmuqEOzrDjsPL/SPjCLY0QZBCaWYGOqAu6MdvEPi
MGF8AV9h5Kege/sMd2AYYQCglFITcT0CQGZmFmprDY/AXUljYyNKy8qB+SlE+nvBycMNtuctEezm
hpP79sLNLwgBqqh6BcXq9lUVJagoyoWrkx2CI2MQ6e0Jb08/BAd4w97BAaXVzSjOisXuvftR0tSN
3AhvnDljjtCYBPg72sLyvDWiEzNgb3cCMWnpcLB3QHZKMmwt7JCVkQp/tayQmBj4OdjA0sYGMSkZ
SI4KgbOnB2xOH8eJI8fg7h+MzIx0ODnYIiIyFoFe7rC0dUdFTSPGJ6YRH+6N/YeOIC2vErlJUYgv
bkVjThL8onKQHu6OIydOwzMwSgWA9T//sNFgAKCUUhP2iw4A5dW1mO6ug7ldoBqyiEBXW3iqwhwb
n4eR9mpsfvN1BCfm6fbDg91wsjBHXd8s8iPdsXPrAeSlpWL7tl2ICPKFh5cPzqhCbW9zHqesXBHl
54WO3nHEuFtgz24zTE1NIcDOEkfNzVBc14SQcB84O1gjPi4XTdWlCAn0w97dB2CnCnpHazsObdsG
a88YteQl+NqeQX5RHdLC/fHa6++ocBKmgsM5eLp7w+zMKaQUVKK2NAVmLv4oSI9FfEYFStPiEV3Q
gr6qAoTEZiPSxwHpBdVwUetX1W14XsBXGQYASik1YdcrADQ1NS0PuUBbWxtKyyqwNDsOX1dHuKoj
eidV/OOCAnH20HF4+QSgqLAEwf6eCA0LhadPMLIz0+HsZI+AwGD4u3uiqrIeIV6OcPTwgZujoz5b
sLS4AH8/FxzZvV8VaRUm1D7f7vhx2Nk4IzkhDe7ulohOSVfz90R4SCBy0nPh7+kEa1tHmJlZwk8t
p725BZ6uPggM8IabtxfsrSxRXtGItJhYeHl7w9HRHr6hsSgrK4W7nTWc7ezwr9dfRWB0Evo7mvTj
e62dnNA+MouO8jyExBegvb4Y1lbn4eYegEF5WtFXHAYASik1Ya83AMije9PTM5CUlISWlpaLTElJ
QWFBgW43PzOO9s5utZ9ewsL8PPq7OtDZO6DHYX5any0w/oJwT2crRqZm5Uo7fSHf4twkmts7MT0z
g7l5w35+fnYWER5OiEsqxPTCEqJUd0Z+jf7efnZyBM1NjRgalWsMVFs1zeLcFFpa2zAxpeah1nlx
YQEyK3nqoGG9FtV6LejXI3S2t2Bsel7Pq6W1U81jHn093WhTr2tG1faJ0QH0DRquI5DXM7M83UB3
J8amDN1fdRgAKKXUhL3eADA+PoG29g4UqEJfWFiIoqIirXTLo3ilEHxRSBE3IgWa3FgYACil1IS9
3gAwPDyqNFx9T24uGAAopdSEvd4AMDIypqY33l5HbiYYACil1IRlACBrhQGAUkpNWAYAslYYACil
1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYA
slYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGA
UkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRl
ACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYY
ACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpN
WAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBr
hQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpNWAYAslYYACil
1IRlACBrhQGAUkpNWAYAslYYACil1IRlACBrhQGAUkpN2PUIAMPDI8t95GZienqGAYBSSk3V9QgA
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
GvXjkpcvojNuT+OFg3JHgGxr+eDKa5XtcPFFgGp76Av9DBcsyl+5cE/u2pD1ljsl5mR7qXWQ1zwh
4+U9UdtELhCUeejtJG3VdhNy4uOQXdaku+flLgo1X7kIcFatm350slzspy8QnDa8P2q+xosDDdvY
8L7o16W3reE3HGTYZz5jlH7FvPYAsHFlAFCsJQDQi5VTcFIkpNCKl/txIdNQgsLkKsPlNj65PdLw
Gj+9cv+SdqOqiOvHDm/A16/DjoRMtY7yuNXV2lBKL68xAEjxNH4Hb6rKWQnjV84rA4D8Ro1c47bR
lPWU6+8YACillN5w5Syd8cfg5K8pK0f6xcXFFwUACTjyVa6Mk6CzkZRgInffMQBQSim94UqBlGus
5Or6r4ryU/QrX6PxurSNpqyXuHJdV7ouAUBmQimllH5GVWj0NS9fIeWXF+V1rfp6TUi5rXTgegJA
nQoAkiAopZRSajoODI+ge2CNAaBaTUQppZRS07buagOAg7O7T/8s9AR6IkoppZSapFLHG/vm0NA1
duUAcM7SOqJvYl6nBUoppZSatlL869r6rxwACCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCyEZl
06b/P0qEJPByZFTgAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[$formDevBox_Load = {
	Add-Type -AssemblyName System.Windows.Forms
	Add-Type -AssemblyName System.Drawing
	$splashForm = Show-SplashScreen -ImageLocation "C:\Development\Scripts\eq_logo_login.gif" -Title "DevBox Loading..." -PassThru
	Set-Location -Path "C:\Development"
	Import-Module WebAdministration
	Import-Module "C:\Development\Utilities\PSBitBucket\PSBitBucket.psm1"
	UpdateNavButtons
	If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
		[void][System.Windows.Forms.MessageBox]::Show("DevBox is not running as Administrator!  Certain funtions will not work correctly without admin rights.", "WARNING!")
	}
	$script:rootDrive = "C:"
	$script:sandboxRoot = "C:\Development\Sandbox"
	$script:intTimerCount = 0
	$script:cfVersion = 2016
	$script:devRoot = "$rootDrive\Development"
	$script:gitDir = "$devRoot\.git"
	$script:cf2016ServerDir = "$devRoot\Servers"
	$script:cf2016ScriptDir = "$devRoot\Scripts"
	$script:cf2018ServerDir = "$devRoot\Servers"
	$script:cf2018ScriptDir = "$devRoot\Scripts"
	$script:devSetupDir = "$devRoot\Sandbox\DevSetup"
	$script:rootSiteName = "AllSites.eqlocal"
	$script:rootSiteDir = "$devRoot\Sandbox\_AllSites"
	$script:EQLibPath = "$devRoot\Servers\Coldfusion\cfusion\lib\Equator"
	$script:rootCF2016Install = "$devRoot\Servers\Coldfusion"
	$script:rootCF2018Install = "$devRoot\Servers\Coldfusion2018"
	$script:serverEnvironment = $null
	$script:serverType = $null
	$script:aPortals = @('v5', 'prov5', 'ap', 'vp', 'bp', 'gip', 'cp', 'eqc', 'chasebp', 'chasews', 'bacbp', 'usbankv5ssopro')
	$script:regexEnvironments = "(devint|alpha|prealphax|alphax|alphax7|betax|betaxa|betaxb|betax2|betax3|betax4|betax5|betax6|betax7)"
	$script:regexDevelopment = "[0-9]\.{0,1}[0-9]{1,2}"
	$script:regexGitEnvironments = "(master|DevAgl|releas.*)"
	
	$script:arrSites = @()
	$arrRootFolders = Get-ChildItem -Path "$devRoot\Sandbox" -Directory
	ForEach ($verFolder In $arrRootFolders) {
		$arrSubFolders = Get-ChildItem -Path "$devRoot\Sandbox\$($verFolder.Name)" -Directory
		ForEach ($varFolder In $arrSubFolders) {
			If (Test-Path "$devRoot\Sandbox\$($verFolder.Name)\$($varFolder.Name)\v5\Application.cfc") {
				$script:arrSites += , @("$($verFolder.Name) $($varFolder.Name)", "$($varFolder.FullName)")
			}
		}
	}
	
	$fv = Get-Item "$script:cf2016ScriptDir\DevBox.exe"
	$fileVersion = $fv.VersionInfo.FileVersion
	$formDevBox.Text = "DevBox v$fileVersion"
	
	If (!(Test-Path -Path "$devRoot\Logs")) {
		New-Item -Path "$devRoot\Logs" -ItemType directory
	}
	
	Log-Console "Starting DevBox..."
	
	For ($i = 0; $i -lt $script:arrSites.Length; $i++) {
		Load-ComboBox $cbCF2016Sites $script:arrSites[$i][0] -Append
	}
	
	#Test for PDF Service
	$splashForm.Text = "Checking PDF Service..."
	If (-not (Get-Service CFHTMLTOPDF)) {
		New-Service -Name CFHTMLTOPDF -DisplayName CFHTMLTOPDF -Description "Service for generating PDFs through CFHTMLTOPDF" -BinaryPathName "$script:rootCF2016Install\cfusion\jetty\jetty.exe -zglaxservice ColdFusion2016Add-onServices" -StartupType Manual
		Log-Console -strInput "Created new CFHTMLTOPDF service"
	} ElseIf ((Get-Service CFHTMLTOPDF).Status -eq 'Running') {
		$buttonPDFService2016.BackColor = 'Green'
		$buttonPDFService2016.Text = "CFHTMLTOPDF Service Running"
		$buttonPDFService2018.BackColor = 'Green'
		$buttonPDFService2018.Text = "CFHTMLTOPDF Service Running"
	} Else {
		$buttonPDFService2016.BackColor = 'OrangeRed'
		$buttonPDFService2016.Text = "CFHTMLTOPDF Service Not Running"
		$buttonPDFService2018.BackColor = 'OrangeRed'
		$buttonPDFService2018.Text = "CFHTMLTOPDF Service Not Running"
	}
	
	#Test for Chocolatey
	$splashForm.Text = "Checking for Chocolatey..."
	If (-not (Test-Path "C:\ProgramData\chocolatey\bin\choco.exe")) {
		Log-Console "Chocolatey not found, please wait while it finishes installing..."
		Invoke-Expression ((New-Object Net.WebClient).DownloadString('http://devops/Chocolatey/Install.ps1'))
		Log-Console "Chocolatey installed."
	} ElseIf ([version](Get-Item "C:\ProgramData\chocolatey\bin\choco.exe").VersionInfo.FileVersion -lt [version]"0.10.5.0") {
		[void][System.Windows.Forms.MessageBox]::Show("Old version of Chocolatey detected, please wait while it finishes upgrading...", "Notice")
		choco source remove -n=devops
		choco source add -n=nexus -s="https://nexus/repository/nuget-hosted/" -priority=1 -y
		choco upgrade chocolatey -y
		Log-Console "Chocolatey upgraded."
	}
	
	#Test for eqDevOps
	If (-not (Test-Path "C:\Program Files\WindowsPowerShell\Modules\eqDevOps\eqDevOps.psm1")) {
		choco install eqDevOps -y -force
	}
	
	Import-Module eqDevOps
	
	#Test for ConsoleZ
	$splashForm.Text = "Checking ConsoleZ setup..."
	If (-not (Test-Path "C:\Program Files\ConsoleZ\Console.exe")) {
		Log-Console "ConsoleZ not found, please wait while it finishes installing..."
		choco install ConsoleZ -y -force
		Log-Console "ConsoleZ installed."
	} ElseIf (((Get-Item "C:\Program Files\ConsoleZ\Console.exe").VersionInfo.FileVersion) -ne '1.19.0.19104') {
		Log-Console "ConsoleZ needs an update, please wait while it finishes installing..."
		choco upgrade ConsoleZ -y -force
		Log-Console "ConsoleZ upgrade complete"
	} Else {
		[xml]$consoleSettings = Get-Content "C:\Program Files\ConsoleZ\console.xml" -ErrorAction SilentlyContinue
		If (-not ($consoleSettings.settings.tabs.tab.title -contains "CMD")) {
			Log-Console "Your ConsoleZ install is missing settings for the CMD tab.  Please contact DevOps for assistance or reinstall ConsoleZ using: choco install consolez -y -force"
	}
	
	#Test for Postman
	$splashForm.Text = "Checking Postman setup..."
	If (-not (Test-Path "$env:LOCALAPPDATA\Postman")) {
		[void][System.Windows.Forms.MessageBox]::Show("Postman needs to be installed.  Please wait while the install completes.", "Notice")
		choco install Postman -y -force
		Log-Console "Postman install complete."
	}
	
	#Add ConsoleZ context menu
	If (!(Test-Path "Registry::HKEY_CLASSES_ROOT\directory\background\shell\Console")) {
		Push-Location "Registry::HKEY_CLASSES_ROOT\directory\background\shell"
		New-Item "Console" -Force | Out-Null
		New-ItemProperty -Path .\Console -Name '(Default)' -Value "Open Console here" -Force | Out-Null
		New-Item -Path .\Console\command -Force | Out-Null
		New-ItemProperty -Path .\Console\command -Name '(Default)' -Value 'C:\Program Files\ConsoleZ\Console.exe -d "%V"' -Force
		Pop-Location
	}
	
	#Test for Visual Studio 2015 Runtimes
	$splashForm.Text = "Checking Visual Studio Runtimes..."
	If (-not (Test-Path "C:\Windows\SysWOW64\vcruntime140.dll")) {
		choco install vcredist2015 -y -force
		Log-Console "Installed Visual Studio 2015 Runtimes needed for MongoDB."
	}
	
	#test for URL Rewrite 2.0
	$splashForm.Text = "Checking URL Rewrite install..."
	If (-not (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{08F0318A-D113-4CF0-993E-50F191D397AD}")) {
		choco install UrlRewrite -y -force
		Log-Console "Microsoft URL Rewrite 2.0 installed."
		Restart-Service W3SVC
		Log-Console "Restarted IIS."
	}
	
	#test for git
	$splashForm.Text = "Checking Git install..."
	[version]$gitTest = (((git --version) -split " ")[2]) -replace 'windows.', ''
	If (!$gitTest) {
		[void][System.Windows.Forms.MessageBox]::Show("Git needs to be installed.  Please wait while the install completes.`nThis will take a few minutes, then DevBox will open back up.", "Warning!")
		choco install git -force -y -version 2.25.0
		Start-Process "powershell.exe" -ArgumentList "-NoLogo -File $cf2016ScriptDir\Reset-DevBox.ps1" -Verb RunAs
		$formDevBox.Close()
	} ElseIf ($gitTest -lt "2.25.0.1") {
		[void][System.Windows.Forms.MessageBox]::Show("Git needs to be upgraded. Please wait while the install completes.`nThis will take a few minutes, then DevBox will open back up.", "Warning!")
		choco install git -force -y -version 2.25.0
		Start-Process "powershell.exe" -ArgumentList "-NoLogo -File $cf2016ScriptDir\Reset-DevBox.ps1" -Verb RunAs
		$formDevBox.Close()
	}
	
	#test for Java and Maven environment variables
	$splashForm.Text = "Checking Java and Maven setup..."
	$scope = [EnvironmentVariableTarget]::Machine
	$regPath = "Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment"
	$EnvironmentReg = Get-ItemProperty -Path $regPath
	$JavaHome = $EnvironmentReg.JAVA_HOME
	$javahomeChanged = $false
	If ($JavaHome -ne "C:\Development\Java\JDK\jdk1.8.0_261") {
		[Environment]::SetEnvironmentVariable("JAVA_HOME", "C:\Development\Java\JDK\jdk1.8.0_261", $scope)
		$EnvironmentReg = Get-ItemProperty -Path $regPath
		$javahomeChanged = $true
	}
	If ($JavaHome -ne "C:\Development\Java\JDK\jdk1.8.0_261" -and $javahomeChanged -eq $false) {
		$JHVerify = [System.Windows.Forms.MessageBox]::Show("JAVA_HOME not set to C:\Development\Java\JDK\jdk1.8.0_261, would you like to update it now?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo)
	}
	If ($JHVerify -eq "Yes") {
		[Environment]::SetEnvironmentVariable("JAVA_HOME", "C:\Development\Java\JDK\jdk1.8.0_261", $scope)
		$EnvironmentReg = Get-ItemProperty -Path $regPath
	}
	$M2Home = $EnvironmentReg.M2_HOME
	If ($M2Home -ne "C:\Development\Utilities\apache-maven") {
		$M2Verify = [System.Windows.Forms.MessageBox]::Show("M2_HOME not set to C:\Development\Utilities\apache-maven, would you like to update it now?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo)
	}
	If ($M2Verify -eq "Yes") {
		[Environment]::SetEnvironmentVariable("M2_HOME", "C:\Development\Utilities\apache-maven", $scope)
		$EnvironmentReg = Get-ItemProperty -Path $regPath
	}
	$Path = $EnvironmentReg.PATH
	#If they have old JDK in Path, replace it
	$jdkChanged = $false
	If ($Path | Select-String -Pattern 'C:\Development\Java\JDK\jdk1.8.0_151\jre\bin' -SimpleMatch) {
		$Path = $Path.Replace('C:\Development\Java\JDK\jdk1.8.0_151\jre\bin', 'C:\Development\Java\JDK\jdk1.8.0_261\jre\bin')
		[Environment]::SetEnvironmentVariable("PATH", $Path.Trim(), $scope)
		$Restart = $true
		$jdkChanged = $true
	}
	If (!($Path | Select-String -Pattern 'C:\Development\Java\JDK\jdk1.8.0_261\jre\bin' -SimpleMatch) -and $jdkChanged -eq $false) {
		$JPVerify = [System.Windows.Forms.MessageBox]::Show("PATH does not include C:\Development\Java\JDK\jdk1.8.0_261\jre\bin, would you like to update it now?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo)
	}
	If ($JPVerify -eq "Yes") {
		[Environment]::SetEnvironmentVariable("PATH", "C:\Development\Java\JDK\jdk1.8.0_261\jre\bin;$Path", $scope)
		$EnvironmentReg = Get-ItemProperty -Path $regPath
		$Path = $EnvironmentReg.PATH
	}
	If (!($Path | Select-String -Pattern 'C:\Development\Utilities\apache-maven' -SimpleMatch) -and $M2Verify -ne "Yes") {
		$MPVerify = [System.Windows.Forms.MessageBox]::Show("PATH does not include C:\Development\Utilities\apache-maven, would you like to update it now?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo)
	}
	If ($MPVerify -eq "Yes" -or $M2Verify -eq "Yes") {
		[Environment]::SetEnvironmentVariable("PATH", "$Path;C:\Development\Utilities\apache-maven", $scope)
		$EnvironmentReg = Get-ItemProperty -Path $regPath
		$Path = $EnvironmentReg.PATH
	}
	If ($JHVerify -eq "Yes" -or $JPVerify -eq "Yes" -or $M2Verify -eq "Yes" -or $MPVerify -eq "Yes" -or $Restart -eq $true) {
		Log-Console "Environment variable updated, restarting DevBox to pick them up."
		Start-Sleep -Seconds 3
		Start-Process "powershell.exe" -ArgumentList "-NoLogo -File $cf2016ScriptDir\Reset-DevBox.ps1" -Verb RunAs
		$formDevBox.Close()
	}
	
	#test for sqljdbc_auth.dll
	If (-not (Test-Path "C:\Windows\System32\sqljdbc_auth.dll")) {
		If (Test-Path "\\HQ\EQ\Software\Resources\DevOps\DevBox\Utilities\sqljdbc_auth.dll") {
			Copy-Item -Path "\\HQ\EQ\Software\Resources\DevOps\DevBox\Utilities\sqljdbc_auth.dll" -Destination "C:\Windows\System32\sqljdbc_auth.dll" -Force
		}
	}
	
	#test for SublimeText
	$splashForm.Text = "Checking for SublimeText install..."
	If (-not (Test-Path "C:\Program Files\Sublime Text 3\sublime_text.exe")) {
		$MyADGroups = (New-Object System.DirectoryServices.DirectorySearcher("(&(objectCategory=User)(samAccountName=$($env:username)))")).FindOne().GetDirectoryEntry().memberOf
		If ($MyADGroups -match 'Sublime.Text') {
			Log-Console "Sublime Text 3 not found."
			Log-Console "Please see this page for details on how to install it... https://eqalm.equator.com/confluence/display/DO/Sublime+Text+3"
		}
	}
	
	$splashForm.Text = "Checking for EQ SymLinks..."
	$currentLinkDir12 = "$script:cf2016ServerDir\ColdFusion\cfusion\lib\Equator"
	If (!(Test-Path $currentLinkDir12)) {
		Log-Console "Current symlink for $currentLinkDir12 does not exist."
	} Else {
		$results = Invoke-Expression "CMD /C DIR $devRoot\Servers\ColdFusion\cfusion\lib /AL /S"
		$regex = "(Equator) \[(.*)\]"
		
		$match = ($results | Select-String -pattern $regex -AllMatches).matches
		If ($match) {
			Log-Console "Current CF2016 Symlink is to: $match"
		} Else {
			If (Test-Path $script:cf2016ServerDir\ColdFusion\cfusion\lib\Equator) {
				If ([System.Windows.Forms.MessageBox]::Show("Folder found at $script:cf2016ServerDir\ColdFusion\cfusion\lib\Equator.  Delete for Symlink?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					Remove-Item $script:cf2016ServerDir\ColdFusion\cfusion\lib\Equator -Recurse -Force -ErrorAction SilentlyContinue -Confirm:$false
				}
			} Else {
				Log-Console "No current Equator Symlink Found!!!"
				Log-Console "Click [Make Symlink] before starting ColdFusion to setup the symlink to <variant>\ThirdPartyTools\Equator"
			}
		}
	}
	
	$currentLinkDir2018 = "$script:cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator"
	If (!(Test-Path $currentLinkDir2018)) {
		Log-Console "Current symlink for $currentLinkDir2018 does not exist."
	} Else {
		$results = Invoke-Expression "CMD /C DIR $devRoot\Servers\Coldfusion2018\cfusion\lib /AL /S"
		$regex = "(Equator) \[(.*)\]"
		
		$match = ($results | Select-String -pattern $regex -AllMatches).matches
		If ($match) {
			Log-Console "Current CF2018 Symlink is to: $match"
		} Else {
			If (Test-Path $script:cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator) {
				If ([System.Windows.Forms.MessageBox]::Show("Folder found at $script:cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator.  Delete for Symlink?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					Remove-Item $script:cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator -Recurse -Force -ErrorAction SilentlyContinue -Confirm:$false
				}
			} Else {
				Log-Console "No current Equator Symlink Found!!!"
				Log-Console 'Click [Make Symlink] before starting ColdFusion to setup the symlink to <variant>\ThirdPartyTools\Equator'
			}
		}
	}
	$script:starting = $true
	$splashForm.Text = "Checking Git repos..."
	$dbRepos = (Get-Repositories -ProjectKey DB).name
	ForEach ($repo In $dbRepos) {
		Load-ListBox -ListBox $clbDBRepos2016 -Items $repo -Append
		Load-ListBox -ListBox $clbDBRepos2018 -Items $repo -Append
	}
	$i = 0
	ForEach ($repo In $dbRepos) {
		If (Test-Path "$script:sandboxRoot\Pro\$repo") {
			$clbDBRepos2016.SetItemChecked($i, $true)
			$clbDBRepos2018.SetItemChecked($i, $true)
		}
		$i++
	}
	
	$archRepos = (Get-Repositories -ProjectKey ARCH).name
	ForEach ($repo In $archRepos) {
		Load-ListBox -ListBox $clbArchRepos2016 -Items $repo -Append
		Load-ListBox -ListBox $clbArchRepos2018 -Items $repo -Append
	}
	$i = 0
	ForEach ($repo In $archRepos) {
		If (Test-Path "$script:sandboxRoot\Architecture\$repo") {
			$clbArchRepos2016.SetItemChecked($i, $true)
			$clbArchRepos2018.SetItemChecked($i, $true)
		}
		$i++
	}
	If (Test-Path "$script:sandboxRoot\Core\binaries\.git\HEAD") {
		$clbCoreBinBranches2016.SetItemChecked(0, $true)
		$clbCoreBinBranches2018.SetItemChecked(0, $true)
	}
	
	$i = 0
	$coreRepos = @("Master", "DevAgl")
	$coreRepos += ((Get-BranchList -ProjectKey CORE -Repo application).displayId) | Where-Object {
		$_ -match "release/\d{1,2}.\d{1,2}"
	}
	ForEach ($repo In $coreRepos) {
		Load-ListBox -ListBox $clbCoreAppBranches2016 -Items $repo -Append
		Load-ListBox -ListBox $clbCoreAppBranches2018 -Items $repo -Append
		If (Test-Path "$script:sandboxRoot\Core\$($repo -replace '/', '.')") {
			$clbCoreAppBranches2016.SetItemChecked($i, $true)
			$clbCoreAppBranches2018.SetItemChecked($i, $true)
		}
		$i++
	}
	
	$strReleaseXML = @"
<?xml version="1.0" encoding="UTF-8"?>
<ReleaseInstructions>
	<changeRequest id="0000000"/>
	<jiraIssue id=""/>
	<Instructions/>
	<database>
		<dataScripts>
		</dataScripts>
		<SSIS>
		</SSIS>
		<ODS>
			<Instructions/>
		</ODS>
	</database>
</ReleaseInstructions>
"@
	[xml]$script:xmlReleaseInstructions = $strReleaseXML
	$script:strLongRunning = "False"
	$script:strReplication = "False"
	$script:strScriptEnvironment = $cbScriptEnvironment.Text
	$script:strSSISEnvironment = $cbSSISEnvironment.Text
	$script:strSSISJob = $cbJob.Text
	$script:strSSISJob = "False"
	$script:strDatabase = $tbDatabase.Text
	$script:strFilePath = $tbFilePath.Text
	$script:strSQLFile = $tbFileName.Text
	$xmlTextBox.Text = Convert-XMLToString -xml $script:xmlReleaseInstructions
	
	$labelUpdate.Text = ""
	& git fetch origin
	$gitCheck = & git log HEAD..origin/master --oneline
	If ($gitCheck) {
		$buttonUpdateDevBox.BackColor = 'Yellow'
		$labelUpdate.Text = "A NEW DEVBOX UPDATE IS AVAILABLE!"
	}
	
	$script:starting = $false
	$formDevBox.BringToFront()
	$splashForm.Close()
}
}

Function UpdateNavButtons {
	$buttonNext.Enabled = $tabControl.SelectedIndex -lt $tabControl.TabCount - 1
	$buttonPrev.Enabled = $tabControl.SelectedIndex -gt 0
}

$buttonPrev_Click = {
	If ($tabControl.SelectedIndex -gt 0) {
		$tabControl.SelectedIndex--
	}
	UpdateNavButtons
}

$buttonNext_Click = {
	If ($tabControl.SelectedIndex -lt $tabControl.TabCount - 1) {
		$tabControl.SelectedIndex++
	}
	UpdateNavButtons
}

#region Control Helper Functions
Function Show-SplashScreen {
		<#
		.SYNOPSIS
			Displays a splash screen using the specified image.
		
		.PARAMETER Image
			Mandatory Image object that is displayed in the splash screen.
		
		.PARAMETER Title
			(Optional) Sets a title for the splash screen window. 
		
		.PARAMETER Timeout
			The amount of seconds before the splash screen is closed.
			Set to 0 to leave the splash screen open indefinitely.
			Default: 2
		
		.PARAMETER ImageLocation
			The file path or url to the image.
	
		.PARAMETER PassThru
			Returns the splash screen form control. Use to manually close the form.
		
		.PARAMETER Modal
			The splash screen will hold up the pipeline until it closes.
	
		.EXAMPLE
			PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3
	
		.EXAMPLE
			PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3
	
		.EXAMPLE
			PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
					#close the splash screen
					$splashScreen.Close()
		.OUTPUTS
			System.Windows.Forms.Form
		
		.NOTES
			Created by SAPIEN Technologies, Inc.
	
			The size of the splash screen is dependent on the image.
			The required assemblies to use this function outside of a WinForms script:
			Add-Type -AssemblyName System.Windows.Forms
			Add-Type -AssemblyName System.Drawing
	#>
	[OutputType([System.Windows.Forms.Form])]
	Param
	(
		[Parameter(ParameterSetName = 'Image',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNull()]
		[System.Drawing.Image]$Image,
		[Parameter(Mandatory = $false)]
		[string]$Title,
		[int]$Timeout = 2,
		[Parameter(ParameterSetName = 'ImageLocation',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNullOrEmpty()]
		[string]$ImageLocation,
		[switch]$PassThru,
		[switch]$Modal
	)
	
	#Create a splash screen form to display the image.
	$splashForm = New-Object System.Windows.Forms.Form
	
	#Create a picture box for the image
	$pict = New-Object System.Windows.Forms.PictureBox
	
	If ($Image) {
		$pict.Image = $Image;
	} Else {
		$pict.Load($ImageLocation)
	}
	
	$pict.AutoSize = $true
	$pict.Dock = 'Fill'
	$splashForm.Controls.Add($pict)
	
	#Display a title if defined.
	If ($Title) {
		$splashForm.Text = $Title
		$splashForm.FormBorderStyle = 'FixedDialog'
	} Else {
		$splashForm.FormBorderStyle = 'None'
	}
	
	#Set a timer
	If ($Timeout -gt 0) {
		$timer = New-Object System.Windows.Forms.Timer
		$timer.Interval = $Timeout * 1000
		$timer.Tag = $splashForm
		$timer.add_Tick({
				$this.Tag.Close();
				$this.Stop()
			})
		$timer.Start()
	}
	
	#Show the form
	$splashForm.AutoSize = $true
	$splashForm.AutoSizeMode = 'GrowAndShrink'
	$splashForm.ControlBox = $false
	$splashForm.StartPosition = 'CenterScreen'
	$splashForm.TopMost = $true
	
	If ($Modal) {
		$splashForm.ShowDialog()
	} Else {
		$splashForm.Show()
	}
	
	If ($PassThru) {
		Return $splashForm
	}
}

Function Update-ListBox {
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	Param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	If (-not $Append) {
		$listBox.Items.Clear()
	}
	
	If ($Items -is [System.Windows.Forms.ListBox+ObjectCollection]) {
		$listBox.Items.AddRange($Items)
	} ElseIf ($Items -is [Array]) {
		$listBox.BeginUpdate()
		ForEach ($obj In $Items) {
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	} Else {
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

Function Update-ComboBox {
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	Param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	If (-not $Append) {
		$ComboBox.Items.Clear()
	}
	
	If ($Items -is [Object[]]) {
		$ComboBox.Items.AddRange($Items)
	} ElseIf ($Items -is [System.Collections.IEnumerable]) {
		$ComboBox.BeginUpdate()
		ForEach ($obj In $Items) {
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	} Else {
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

<#
	.SYNOPSIS
		Deletes all files from a directory structure and removes the directory.
	
	.DESCRIPTION
		Deletes all files from a directory structure and removes the directory.
	
	.PARAMETER Path
		Path to delete
	
	.EXAMPLE
				PS C:\> Remove-Directory -Path 'Value1'
	
	.NOTES
		Additional information about the function.
#>
Function Remove-Directory {
	[CmdletBinding()]
	Param
	(
		[Parameter(Mandatory = $true)]
		[ValidateScript({
				Test-Path $_
			})]
		[string]$Path
	)
	
	Get-ChildItem $Path -Recurse -Force | Where-Object {
		$_.PSIsContainer -ne $true
	} | ForEach-Object {
		Remove-Item -Path $_.FullName -Force -ErrorAction SilentlyContinue -Confirm:$false
	}
	Remove-Item $Path -Recurse -Force -ErrorAction SilentlyContinue -Confirm:$false
}

Function Load-ListBox {
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.

	.PARAMETER  ListBox
		The ListBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ListBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ListBox $listBox1 "Red" -Append
		Load-ListBox $listBox1 "White" -Append
		Load-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Load-ListBox $listBox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ListBox]$ListBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	If (-not $Append) {
		$listBox.Items.Clear()
	}
	
	If ($Items -is [System.Windows.Forms.ListBox+ObjectCollection]) {
		$listBox.Items.AddRange($Items)
	} ElseIf ($Items -is [Array]) {
		$listBox.BeginUpdate()
		ForEach ($obj In $Items) {
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	} Else {
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

Function Load-ComboBox {
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	If (-not $Append) {
		$ComboBox.Items.Clear()
	}
	
	If ($Items -is [Object[]]) {
		$ComboBox.Items.AddRange($Items)
	} ElseIf ($Items -is [Array]) {
		$ComboBox.BeginUpdate()
		ForEach ($obj In $Items) {
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	} Else {
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

Function Load-ToolStripComboBox {
<#
    .SYNOPSIS
        This functions helps you load items into a ToolStripComboBox.

    .DESCRIPTION
        Use this function to dynamically load items into the ToolStripComboBox control.

    .PARAMETER  ToolStripComboBox
        The ToolStripComboBox control you want to add items to.

    .PARAMETER  Items
        The object or objects you wish to load into the ToolStripComboBox's Items collection.
    
    .PARAMETER  Append
        Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
    
    .EXAMPLE
        Load-ToolStripComboBox $ToolStripComboBox1 "Red", "White", "Blue"
    
    .EXAMPLE
        Load-ToolStripComboBox $ToolStripComboBox1 "Red" -Append
        Load-ToolStripComboBox $ToolStripComboBox1 "White" -Append
        Load-ToolStripComboBox $ToolStripComboBox1 "Blue" -Append
    
    .EXAMPLE
        Load-ToolStripComboBox $ToolStripComboBox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ToolStripComboBox]$ToolStripComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	If (-not $Append) {
		$ToolStripComboBox.Items.Clear()
	}
	
	If ($Items -is [Object[]]) {
		$ToolStripComboBox.Items.AddRange($Items)
	} ElseIf ($Items -is [Array]) {
		$ToolStripComboBox.BeginUpdate()
		ForEach ($obj In $Items) {
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	} Else {
		$ToolStripComboBox.Items.Add($Items)
	}
}

Function Invoke-Sqlcmd2 {
    <# 
    .SYNOPSIS 
        Runs a T-SQL script. 

    .DESCRIPTION 
        Runs a T-SQL script. Invoke-Sqlcmd2 only returns message output, such as the output of PRINT statements when -verbose parameter is specified.
        Paramaterized queries are supported. 

        Help details below borrowed from Invoke-Sqlcmd

    .PARAMETER ServerInstance
        One or more ServerInstances to query. For default instances, only specify the computer name: "MyComputer". For named instances, use the format "ComputerName\InstanceName".

    .PARAMETER Database
        A character string specifying the name of a database. Invoke-Sqlcmd2 connects to this database in the instance that is specified in -ServerInstance.

        If a SQLConnection is provided, we explicitly switch to this database

    .PARAMETER Query
        Specifies one or more queries to be run. The queries can be Transact-SQL (? or XQuery statements, or sqlcmd commands. Multiple queries separated by a semicolon can be specified. Do not specify the sqlcmd GO separator. Escape any double quotation marks included in the string ?). Consider using bracketed identifiers such as [MyTable] instead of quoted identifiers such as "MyTable".

    .PARAMETER InputFile
        Specifies a file to be used as the query input to Invoke-Sqlcmd2. The file can contain Transact-SQL statements, (? XQuery statements, and sqlcmd commands and scripting variables ?). Specify the full path to the file.

    .PARAMETER Credential
        Specifies A PSCredential for SQL Server Authentication connection to an instance of the Database Engine.
        
        If -Credential is not specified, Invoke-Sqlcmd attempts a Windows Authentication connection using the Windows account running the PowerShell session.
        
        SECURITY NOTE: If you use the -Debug switch, the connectionstring including plain text password will be sent to the debug stream.

    .PARAMETER QueryTimeout
        Specifies the number of seconds before the queries time out.

    .PARAMETER ConnectionTimeout
        Specifies the number of seconds when Invoke-Sqlcmd2 times out if it cannot successfully connect to an instance of the Database Engine. The timeout value must be an integer between 0 and 65534. If 0 is specified, connection attempts do not time out.

    .PARAMETER As
        Specifies output type - DataSet, DataTable, array of DataRow, PSObject or Single Value 

        PSObject output introduces overhead but adds flexibility for working with results: http://powershell.org/wp/forums/topic/dealing-with-dbnull/

    .PARAMETER SqlParameters
        Hashtable of parameters for parameterized SQL queries.  http://blog.codinghorror.com/give-me-parameterized-sql-or-give-me-death/

        Example:
            -Query "SELECT ServerName FROM tblServerInfo WHERE ServerName LIKE @ServerName"
            -SqlParameters @{"ServerName = "c-is-hyperv-1"}

    .PARAMETER AppendServerInstance
        If specified, append the server instance to PSObject and DataRow output

    .PARAMETER SQLConnection
        If specified, use an existing SQLConnection.
            We attempt to open this connection if it is closed

    .INPUTS 
        None 
            You cannot pipe objects to Invoke-Sqlcmd2 

    .OUTPUTS
       As PSObject:     System.Management.Automation.PSCustomObject
       As DataRow:      System.Data.DataRow
       As DataTable:    System.Data.DataTable
       As DataSet:      System.Data.DataTableCollectionSystem.Data.DataSet
       As SingleValue:  Dependent on data type in first column.

    .EXAMPLE 
        Invoke-Sqlcmd2 -ServerInstance "MyComputer\MyInstance" -Query "SELECT login_time AS 'StartTime' FROM sysprocesses WHERE spid = 1" 
    
        This example connects to a named instance of the Database Engine on a computer and runs a basic T-SQL query. 
        StartTime 
        ----------- 
        2010-08-12 21:21:03.593 

    .EXAMPLE 
        Invoke-Sqlcmd2 -ServerInstance "MyComputer\MyInstance" -InputFile "C:\MyFolder\tsqlscript.sql" | Out-File -filePath "C:\MyFolder\tsqlscript.rpt" 
    
        This example reads a file containing T-SQL statements, runs the file, and writes the output to another file. 

    .EXAMPLE 
        Invoke-Sqlcmd2  -ServerInstance "MyComputer\MyInstance" -Query "PRINT 'hello world'" -Verbose 

        This example uses the PowerShell -Verbose parameter to return the message output of the PRINT command. 
        VERBOSE: hello world 

    .EXAMPLE
        Invoke-Sqlcmd2 -ServerInstance MyServer\MyInstance -Query "SELECT ServerName, VCNumCPU FROM tblServerInfo" -as PSObject | ?{$_.VCNumCPU -gt 8}
        Invoke-Sqlcmd2 -ServerInstance MyServer\MyInstance -Query "SELECT ServerName, VCNumCPU FROM tblServerInfo" -as PSObject | ?{$_.VCNumCPU}

        This example uses the PSObject output type to allow more flexibility when working with results.
        
        If we used DataRow rather than PSObject, we would see the following behavior:
            Each row where VCNumCPU does not exist would produce an error in the first example
            Results would include rows where VCNumCPU has DBNull value in the second example

    .EXAMPLE
        'Instance1', 'Server1/Instance1', 'Server2' | Invoke-Sqlcmd2 -query "Sp_databases" -as psobject -AppendServerInstance

        This example lists databases for each instance.  It includes a column for the ServerInstance in question.
            DATABASE_NAME          DATABASE_SIZE REMARKS        ServerInstance                                                     
            -------------          ------------- -------        --------------                                                     
            REDACTED                       88320                Instance1                                                      
            master                         17920                Instance1                                                      
            ...                                                                                              
            msdb                          618112                Server1/Instance1                                                                                                              
            tempdb                        563200                Server1/Instance1
            ...                                                     
            OperationsManager           20480000                Server2                                                            

    .EXAMPLE
        #Construct a query using SQL parameters
            $Query = "SELECT ServerName, VCServerClass, VCServerContact FROM tblServerInfo WHERE VCServerContact LIKE @VCServerContact AND VCServerClass LIKE @VCServerClass"

        #Run the query, specifying values for SQL parameters
            Invoke-Sqlcmd2 -ServerInstance SomeServer\NamedInstance -Database ServerDB -query $query -SqlParameters @{ VCServerContact="%cookiemonster%"; VCServerClass="Prod" }
            
            ServerName    VCServerClass VCServerContact        
            ----------    ------------- ---------------        
            SomeServer1   Prod          cookiemonster, blah                 
            SomeServer2   Prod          cookiemonster                 
            SomeServer3   Prod          blah, cookiemonster                 

    .EXAMPLE
        Invoke-Sqlcmd2 -SQLConnection $Conn -Query "SELECT login_time AS 'StartTime' FROM sysprocesses WHERE spid = 1" 
    
        This example uses an existing SQLConnection and runs a basic T-SQL query against it

        StartTime 
        ----------- 
        2010-08-12 21:21:03.593 


    .NOTES 
        Version History 
        poshcode.org - http://poshcode.org/4967
        v1.0         - Chad Miller - Initial release 
        v1.1         - Chad Miller - Fixed Issue with connection closing 
        v1.2         - Chad Miller - Added inputfile, SQL auth support, connectiontimeout and output message handling. Updated help documentation 
        v1.3         - Chad Miller - Added As parameter to control DataSet, DataTable or array of DataRow Output type 
        v1.4         - Justin Dearing <zippy1981 _at_ gmail.com> - Added the ability to pass parameters to the query.
        v1.4.1       - Paul Bryson <atamido _at_ gmail.com> - Added fix to check for null values in parameterized queries and replace with [DBNull]
        v1.5         - Joel Bennett - add SingleValue output option
        v1.5.1       - RamblingCookieMonster - Added ParameterSets, set Query and InputFile to mandatory
        v1.5.2       - RamblingCookieMonster - Added DBNullToNull switch and code from Dave Wyatt. Added parameters to comment based help (need someone with SQL expertise to verify these)
                 
        github.com   - https://github.com/RamblingCookieMonster/PowerShell
        v1.5.3       - RamblingCookieMonster - Replaced DBNullToNull param with PSObject Output option. Added credential support. Added pipeline support for ServerInstance.  Added to GitHub
                                             - Added AppendServerInstance switch.
                                             - Updated OutputType attribute, comment based help, parameter attributes (thanks supersobbie), removed username/password params
                                             - Added help for sqlparameter parameter.
                                             - Added ErrorAction SilentlyContinue handling to Fill method
        v1.6.0                               - Added SQLConnection parameter and handling.  Is there a more efficient way to handle the parameter sets?
                                             - Fixed SQLConnection handling so that it is not closed (we now only close connections we create)

    .LINK
        https://github.com/RamblingCookieMonster/PowerShell

    .LINK
        New-SQLConnection

    .LINK
        Invoke-SQLBulkCopy

    .LINK
        Out-DataTable

    .FUNCTIONALITY
        SQL
    #>
	
	[CmdletBinding(DefaultParameterSetName = 'Ins-Que')]
	[OutputType([System.Management.Automation.PSCustomObject], [System.Data.DataRow], [System.Data.DataTable], [System.Data.DataTableCollection], [System.Data.DataSet])]
	Param (
		[Parameter(ParameterSetName = 'Ins-Que',
				   Position = 0,
				   Mandatory = $true,
				   ValueFromPipeline = $true,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false,
				   HelpMessage = 'SQL Server Instance required...')]
		[Parameter(ParameterSetName = 'Ins-Fil',
				   Position = 0,
				   Mandatory = $true,
				   ValueFromPipeline = $true,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false,
				   HelpMessage = 'SQL Server Instance required...')]
		[Alias('Instance', 'Instances', 'ComputerName', 'Server', 'Servers')]
		[ValidateNotNullOrEmpty()]
		[string[]]$ServerInstance,
		[Parameter(Position = 1,
				   Mandatory = $false,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[string]$Database,
		[Parameter(ParameterSetName = 'Ins-Que',
				   Position = 2,
				   Mandatory = $true,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[Parameter(ParameterSetName = 'Con-Que',
				   Position = 2,
				   Mandatory = $true,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[string]$Query,
		[Parameter(ParameterSetName = 'Ins-Fil',
				   Position = 2,
				   Mandatory = $true,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[Parameter(ParameterSetName = 'Con-Fil',
				   Position = 2,
				   Mandatory = $true,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[ValidateScript({
				Test-Path $_
			})]
		[string]$InputFile,
		[Parameter(ParameterSetName = 'Ins-Que',
				   Position = 3,
				   Mandatory = $false,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[Parameter(ParameterSetName = 'Ins-Fil',
				   Position = 3,
				   Mandatory = $false,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[System.Management.Automation.PSCredential]$Credential,
		[Parameter(Position = 4,
				   Mandatory = $false,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[Int32]$QueryTimeout = 600,
		[Parameter(ParameterSetName = 'Ins-Fil',
				   Position = 5,
				   Mandatory = $false,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[Parameter(ParameterSetName = 'Ins-Que',
				   Position = 5,
				   Mandatory = $false,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[Int32]$ConnectionTimeout = 15,
		[Parameter(Position = 6,
				   Mandatory = $false,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[ValidateSet("DataSet", "DataTable", "DataRow", "PSObject", "SingleValue")]
		[string]$As = "DataRow",
		[Parameter(Position = 7,
				   Mandatory = $false,
				   ValueFromPipelineByPropertyName = $true,
				   ValueFromRemainingArguments = $false)]
		[System.Collections.IDictionary]$SqlParameters,
		[Parameter(Position = 8,
				   Mandatory = $false)]
		[switch]$AppendServerInstance,
		[Parameter(ParameterSetName = 'Con-Que',
				   Position = 9,
				   Mandatory = $false,
				   ValueFromPipeline = $false,
				   ValueFromPipelineByPropertyName = $false,
				   ValueFromRemainingArguments = $false)]
		[Parameter(ParameterSetName = 'Con-Fil',
				   Position = 9,
				   Mandatory = $false,
				   ValueFromPipeline = $false,
				   ValueFromPipelineByPropertyName = $false,
				   ValueFromRemainingArguments = $false)]
		[Alias('Connection', 'Conn')]
		[ValidateNotNullOrEmpty()]
		[System.Data.SqlClient.SQLConnection]$SQLConnection
	)
	
	Begin {
		If ($InputFile) {
			$filePath = $(Resolve-Path $InputFile).path
			$Query = [System.IO.File]::ReadAllText("$filePath")
		}
		
		Write-Verbose "Running Invoke-Sqlcmd2 with ParameterSet '$($PSCmdlet.ParameterSetName)'.  Performing query '$Query'"
		
		If ($As -eq "PSObject") {
			#This code scrubs DBNulls.  Props to Dave Wyatt
			$cSharp = @'
                using System;
                using System.Data;
                using System.Management.Automation;

                public class DBNullScrubber
                {
                    public static PSObject DataRowToPSObject(DataRow row)
                    {
                        PSObject psObject = new PSObject();

                        if (row != null && (row.RowState & DataRowState.Detached) != DataRowState.Detached)
                        {
                            foreach (DataColumn column in row.Table.Columns)
                            {
                                Object value = null;
                                if (!row.IsNull(column))
                                {
                                    value = row[column];
                                }

                                psObject.Properties.Add(new PSNoteProperty(column.ColumnName, value));
                            }
                        }

                        return psObject;
                    }
                }
'@
			
			Try {
				Add-Type -TypeDefinition $cSharp -ReferencedAssemblies 'System.Data', 'System.Xml' -ErrorAction stop
			} Catch {
				If (-not $_.ToString() -like "*The type name 'DBNullScrubber' already exists*") {
					Write-Warning "Could not load DBNullScrubber.  Defaulting to DataRow output: $_"
					$As = "Datarow"
				}
			}
		}
		
		#Handle existing connections
		If ($PSBoundParameters.ContainsKey('SQLConnection')) {
			If ($SQLConnection.State -notlike "Open") {
				Try {
					Write-Verbose "Opening connection from '$($SQLConnection.State)' state"
					$SQLConnection.Open()
				} Catch {
					Throw $_
				}
			}
			
			If ($Database -and $SQLConnection.Database -notlike $Database) {
				Try {
					Write-Verbose "Changing SQLConnection database from '$($SQLConnection.Database)' to $Database"
					$SQLConnection.ChangeDatabase($Database)
				} Catch {
					Throw "Could not change Connection database '$($SQLConnection.Database)' to $Database`: $_"
				}
			}
			
			If ($SQLConnection.state -like "Open") {
				$ServerInstance = @($SQLConnection.DataSource)
			} Else {
				Throw "SQLConnection is not open"
			}
		}
		
	}
	Process {
		ForEach ($SQLInstance In $ServerInstance) {
			Write-Verbose "Querying ServerInstance '$SQLInstance'"
			
			If ($PSBoundParameters.Keys -contains "SQLConnection") {
				$Conn = $SQLConnection
			} Else {
				If ($Credential) {
					$ConnectionString = "Server={0};Database={1};User ID={2};Password=`"{3}`";Trusted_Connection=False;Connect Timeout={4}" -f $SQLInstance, $Database, $Credential.UserName, $Credential.GetNetworkCredential().Password, $ConnectionTimeout
				} Else {
					$ConnectionString = "Server={0};Database={1};Integrated Security=True;Connect Timeout={2}" -f $SQLInstance, $Database, $ConnectionTimeout
				}
				
				$conn = New-Object System.Data.SqlClient.SQLConnection
				$conn.ConnectionString = $ConnectionString
				Write-Debug "ConnectionString $ConnectionString"
				
				Try {
					$conn.Open()
				} Catch {
					Write-Error $_
					Continue
				}
			}
			
			#Following EventHandler is used for PRINT and RAISERROR T-SQL statements. Executed when -Verbose parameter specified by caller 
			If ($PSBoundParameters.Verbose) {
				$conn.FireInfoMessageEventOnUserErrors = $true
				$handler = [System.Data.SqlClient.SqlInfoMessageEventHandler] {
					Write-Verbose "$($_)"
				}
				$conn.add_InfoMessage($handler)
			}
			
			$cmd = New-Object system.Data.SqlClient.SqlCommand($Query, $conn)
			$cmd.CommandTimeout = $QueryTimeout
			
			If ($SqlParameters -ne $null) {
				$SqlParameters.GetEnumerator() |
				ForEach-Object {
					If ($_.Value -ne $null) {
						$cmd.Parameters.AddWithValue($_.Key, $_.Value)
					} Else {
						$cmd.Parameters.AddWithValue($_.Key, [DBNull]::Value)
					}
				} > $null
			}
			
			$ds = New-Object system.Data.DataSet
			$da = New-Object system.Data.SqlClient.SqlDataAdapter($cmd)
			
			Try {
				[void]$da.fill($ds)
				If (-not $PSBoundParameters.ContainsKey('SQLConnection')) {
					$conn.Close()
				}
			} Catch {
				$Err = $_
				If (-not $PSBoundParameters.ContainsKey('SQLConnection')) {
					$conn.Close()
				}
				
				Switch ($ErrorActionPreference.tostring()) {
					{
						'SilentlyContinue', 'Ignore' -contains $_
					} {
					}
					'Stop' {
						Throw $Err
					}
					'Continue' {
						Write-Error $Err
					}
					Default {
						Write-Error $Err
					}
				}
			}
			
			If ($AppendServerInstance) {
				#Basics from Chad Miller
				$Column = New-Object Data.DataColumn
				$Column.ColumnName = "ServerInstance"
				$ds.Tables[0].Columns.Add($Column)
				ForEach ($row In $ds.Tables[0]) {
					$row.ServerInstance = $SQLInstance
				}
			}
			
			Switch ($As) {
				'DataSet'
				{
					$ds
				}
				'DataTable'
				{
					$ds.Tables
				}
				'DataRow'
				{
					$ds.Tables[0]
				}
				'PSObject'
				{
					#Scrub DBNulls - Provides convenient results you can use comparisons with
					#Introduces overhead (e.g. ~2000 rows w/ ~80 columns went from .15 Seconds to .65 Seconds - depending on your data could be much more!)
					ForEach ($row In $ds.Tables[0].Rows) {
						[DBNullScrubber]::DataRowToPSObject($row)
					}
				}
				'SingleValue'
				{
					$ds.Tables[0] | Select-Object -ExpandProperty $ds.Tables[0].Columns[0].ColumnName
				}
			}
		}
	}
} #Invoke-Sqlcmd2

Function Log-Console ($strInput) {
	$consolebox.AppendText("$strInput`n")
	$consolebox.Select($consolebox.TextLength, 1)
	$consolebox.ScrollToCaret()
	$consolebox2.AppendText("$strInput`n")
	$consolebox2.Select($consolebox2.TextLength, 1)
	$consolebox2.ScrollToCaret()
}

Function Get-XMLFile {
<#
	.SYNOPSIS
		Reads an XML file and returns a xml object.
	
	.DESCRIPTION
		Reads an XML file and returns a xml object.
	
	.PARAMETER xmlFile
		Path to the xml file to be read.
	
	.EXAMPLE
		PS C:\> $xmlFile = Get-XMLFile -xmlFile $value1
#>
	[CmdletBinding()]
	Param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNullOrEmpty()]
		[string]$xmlFile
	)
	[xml]$xmlData = get-content $xmlFile -ErrorAction SilentlyContinue
	Return $xmlData
}

Function Convert-XMLToString {
<#
	.SYNOPSIS
		Converts XML into a string
	
	.DESCRIPTION
		Takes a XmlDocument and converts it into a string.
	
	.PARAMETER xml
		XmlDocument to convert.
	
	.PARAMETER indent
		How much space to use when formatting indented.  If 0 is specified, the xml string will return on a single line.
#>
	[OutputType([string])]
	Param
	(
		[xml]$xml,
		[int]$indent = 2
	)
	
	$StringWriter = New-Object System.IO.StringWriter
	$XmlWriter = New-Object System.XMl.XmlTextWriter $StringWriter
	If ($indent -gt 0) {
		$xmlWriter.Formatting = "indented"
		$xmlWriter.Indentation = $Indent
	}
	$xml.WriteContentTo($XmlWriter)
	$XmlWriter.Flush()
	$StringWriter.Flush()
	Return $StringWriter.ToString()
}

Function Set-XMLFile {
<#
	.SYNOPSIS
		Saves $xmlData to $xmlFile path.
	
	.DESCRIPTION
		Saves $xmlData to $xmlFile path using indenting and ensuring UTF8Encoding is False.
	
	.PARAMETER xmlFile
		Path to where the file should be saved.
	
	.PARAMETER xmlData
		XML data to save into the file.
	
	.EXAMPLE
		PS C:\> Save-XMLFile -xmlFile C:\path\to\file.xml -xmlData $someXmlData
#>
	[CmdletBinding()]
	Param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNullOrEmpty()]
		[string]$xmlFile,
		[Parameter(Mandatory = $true)]
		[ValidateNotNullOrEmpty()]
		[xml]$xmlData
	)
	#Make sure BOM is not saved in XML file
	$Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($False)
	$textWriter = New-Object System.Xml.XmlTextWriter($xmlFile, $Utf8NoBomEncoding)
	$textWriter.Formatting = "indented"
	$textWriter.Indentation = 2
	$xmlData.save($textWriter)
	$textWriter.close()
}

Function Site-Exists($script:siteName) {
	Return (Get-Item "IIS:\Sites\$script:siteName")
}

Function Setup-EQConnect() {
	
}

Function createVirtualDirectory($script:sandboxRoot, $script:siteName, $directoryName, $optionalfullpath) {
	
	<#if ((Site-Exists $script:siteName) -ne $script:siteName) {
		Log-Console "Can't add virtual directory $directoryName to $script:siteName. $script:siteName does not exist. Did you create your sandbox?"
		return
	}#>
	
	If ($optionalfullpath -ne $null) {
		$fullpath = $optionalfullpath
	} Else {
		$fullpath = "$script:sandboxRoot\$directoryName"
	}
	
	If (Test-Path $fullpath) {
		New-WebVirtualDirectory -site $script:siteName -Name $directoryName -PhysicalPath $fullpath | Out-Null
		Log-Console "Created virtual directory /$directoryName for directory $fullpath."
	} Else {
		Log-Console "$fullpath does not exist. Did you create your sandbox?  Are you sure you are running with Admin Rights?"
	}
}

Function createWebSite($script:siteName, $siteDir, $websitePhysicalPath, $targetPortals) {
	
	Log-Console "Creating $script:siteName on $websitePhysicalPath"
	
	If (Test-Path $websitePhysicalPath) {
		If (Site-Exists $script:siteName) {
			Try {
				dropWebsite $script:siteName
			} Catch {
				Log-Console "Could not remove website $script:siteName."
			}
		}
		
		New-Website -name $script:siteName -HostHeader $script:siteName -PhysicalPath $websitePhysicalPath | Out-Null
		If ($script:branchName -match "$script:regexGitEnvironments") {
			ForEach ($portal In $targetPortals) {
				$hostName = "$portal.$script:branchName.eqlocal"
				Log-Console "Binding host $hostName to $script:siteName"
				New-WebBinding -name $script:siteName -IPAddress "*" -Port 80 -HostHeader $hostName
			}
		} Else {
			ForEach ($portal In $targetPortals) {
				$hostName = "$release$variant.$portal.$environment.eqlocal"
				Log-Console "Binding host $hostName to $script:siteName"
				New-WebBinding -name $script:siteName -IPAddress "*" -Port 80 -HostHeader $hostName
			}
		}
		$siteParentDir = (Get-Item $siteDir).Parent.fullname
		$script:sandboxRoot = (Get-Item $siteParentDir).Parent.fullname
		
		createVirtualDirectory $script:sandboxRoot $script:siteName "ajax" "$siteDir\ajax"
		If ($script:siteName -match "\.ws\.") {
			createVirtualDirectory $script:sandboxRoot $script:siteName "cfc" "$siteDir\cfc"
		}
		createVirtualDirectory $script:sandboxRoot $script:siteName "devsetup"
		createVirtualDirectory $script:sandboxRoot $script:siteName "scheduledtasks" "$siteDir\scheduledtasks"
		createVirtualDirectory $script:sandboxRoot $script:siteName "v5" "$siteDir\v5"
		If ($cfVersion -eq 2016) {
			createVirtualDirectory $script:sandboxRoot $script:siteName "CFIDE" "$script:rootCF2016Install\cfusion\wwwroot\CFIDE"
			createVirtualDirectory $script:sandboxRoot $script:siteName "jakarta" "$script:rootCF2016Install\config\wsconfig\1"
			createVirtualDirectory $script:sandboxRoot $script:siteName "cf_scripts" "$script:rootCF2016Install\cfusion\wwwroot\cf_scripts"
		} ElseIf ($cfVersion -eq 2018) {
			createVirtualDirectory $script:sandboxRoot $script:siteName "CFIDE" "$script:rootCF2018Install\cfusion\wwwroot\CFIDE"
		}
		
		If (!(Test-Path "$siteParentDir\binaries\images")) {
			New-Item "$siteParentDir\binaries\images" -ItemType directory | Out-Null
		}
		
		If (!(Test-Path "$siteParentDir\binaries\report_temp")) {
			New-Item "$siteParentDir\binaries\report_temp" -ItemType directory | Out-Null
		}
		createVirtualDirectory $script:sandboxRoot $script:siteName "images" "$siteParentDir\binaries\images"
		If ($script:siteName -match "v5webservices") {
			createVirtualDirectory $script:sandboxRoot $script:siteName "webservices" "$siteDir\v5webservices"
		} Else {
			createVirtualDirectory $script:sandboxRoot $script:siteName "webservices" "$siteDir\webservices"
		}
		createVirtualDirectory $script:sandboxRoot $script:siteName "scripts" "$siteDir\scripts"
		createVirtualDirectory $script:sandboxRoot $script:siteName "tests" "$siteDir\testing\tests"
	} Else {
		Log-Console "$websitePhysicalPath does not exist. Did you create your sandbox?"
		$consolebox.ScrollToCaret()
	}
}

Function dropWebsite ($script:siteName) {
	
	If (Site-Exists $script:siteName) {
		Try {
			Remove-Website $script:siteName
			Log-Console "Dropped site $script:siteName"
		} Catch {
			Log-Console "Could not remove website $script:siteName."
		}
	} Else {
		Log-Console "Site $script:siteName not found!"
	}
}

Function makeSymLink {
	Param
	(
		[string]$variantName
	)
	
	If ($variantName -match "-") {
		$splitpath = ($variantName).ToLower() -split "-"
		[string]$variantPath = $splitpath[0] + "\" + $splitpath[1]
		#Log-Console $variantPath
		$variantPath = "$script:devRoot\Sandbox\" + $variantPath + "\ThirdPartyTools\Equator"
		
		If (Test-Path $variantPath) {
			If ($cfVersion -eq 2016) {
				If (Test-Path $cf2016ServerDir\ColdFusion\cfusion\lib\Equator) {
					cmd /c rmdir "$cf2016ServerDir\ColdFusion\cfusion\lib\Equator" /s /q
				}
				& cmd /c mklink /d /j $cf2016ServerDir\ColdFusion\cfusion\lib\Equator $variantPath
				Log-Console "Symlink created for $variantName"
			} ElseIf ($cfVersion -eq 2018) {
				If (Test-Path $cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator) {
					cmd /c rmdir "$cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator" /s /q
				}
				& cmd /c mklink /d /j $cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator $variantPath
				Log-Console "Symlink created for $variantName"
			}
		}
	} ElseIf ($variantName -match "$script:regexGitEnvironments") {
		#Log-Console $variantPath
		$variantName = $variantName -replace '/', '.'
		$variantPath = "$script:devRoot\Sandbox\Core\$variantName\ThirdPartyTools\Equator"
		
		If (Test-Path $variantPath) {
			If ($cfVersion -eq 2016) {
				If (Test-Path $cf2016ServerDir\ColdFusion\cfusion\lib\Equator) {
					cmd /c rmdir "$cf2016ServerDir\ColdFusion\cfusion\lib\Equator" /s /q
				}
				& cmd /c mklink /d /j $cf2016ServerDir\ColdFusion\cfusion\lib\Equator $variantPath
				Log-Console "Symlink created for $variantName"
			} ElseIf ($cfVersion -eq 2018) {
				If (Test-Path $cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator) {
					cmd /c rmdir "$cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator" /s /q
				}
				& cmd /c mklink /d /j $cf2018ServerDir\Coldfusion2018\cfusion\lib\Equator $variantPath
				Log-Console "Symlink created for $variantName"
			}
		}
	} Else {
		Log-Console "Symlink creation failed! Equator library files not found in selected path: $variantPath"
	}
}

Function makeBinSymLink {
	Param
	(
		[string]$variantName
	)
	
	$splitpath = ($variantName).ToLower() -split "-"
	$binPath = $splitpath[0] + "\binaries"
	$binPath = "$script:sandboxRoot\$binPath"
	$variantPath = $variantName.Replace('-', '\')
	$variantPath = "$script:sandboxRoot\$variantPath"
	
	If (Test-Path $binPath) {
		$verify = [System.Windows.Forms.MessageBox]::Show("$binPath found.  Remove it and replace with symlink to $variantPath`?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo)
		If ($verify -eq "Yes") {
			& cmd /c rmdir $binPath /s /q
			& cmd /c mklink /d /j $binPath $variantPath
			Log-Console "Binaries symlink created for $variantPath"
		}
	} Else {
		& cmd /c mklink /d /j $binPath $variantPath
		Log-Console "Binaries symlink created for $variantPath"
	}
}

Function checkCFSetup($rootSiteDir, $rootSiteName, $devSetupDir) {
	If (-not (Test-Path $rootSiteDir)) {
		Log-Console "Creating Root Site directory $rootSiteName in $rootSiteDir"
		New-Item $rootSiteDir -ItemType directory | Out-Null
		Copy-item $cf2016ScriptDir\templates\AllSites\index.cfm $rootSiteDir
	}
	If (-not (Test-Path $devSetupDir)) {
		Log-Console "Creating DevSetup directory $devSetupDir"
		New-Item $devSetupDir -ItemType directory | Out-Null
		Copy-item $cf2016ScriptDir\templates\DevSetup\Devsetup.cfc $devSetupDir
	}
	If (-not (Site-Exists $rootSiteName)) {
		Log-Console "Creating WebSite $rootSiteName in $rootSiteDir"
		New-Website -name $rootSiteName -HostHeader $rootSiteName -PhysicalPath $rootSiteDir -force | Out-Null
		If ($cfVersion -eq 2016) {
			New-WebVirtualDirectory -site $rootSiteName -Name "CFIDE" -PhysicalPath "$script:rootCF2016Install\cfusion\wwwroot\CFIDE" | Out-Null
		} ElseIf ($cfVersion -eq 2018) {
			New-WebVirtualDirectory -site $rootSiteName -Name "CFIDE" -PhysicalPath "$script:rootCF2018Install\cfusion\wwwroot\CFIDE" | Out-Null
		}
	}
}

Function Remove-ReadOnly ($target, $including = "*.*") {
	Log-Console "Removing ReadOnly attributes on $target for $including"
	Get-ChildItem $target -include $including -recurse | ForEach-Object {
		$_.Attributes = 'Normal'
	}
}

Function Select-FolderDialog ($initialDirectory) {
	$OpenFolderDialog = New-Object System.Windows.Forms.FolderBrowserDialog -Property @{
		SelectedPath = $initialDirectory
	}
	$OpenFolderDialog.ShowDialog() | Out-Null
	Return $OpenFolderDialog.SelectedPath
}

Function Select-SaveFileDialog ($initialDirectory) {
	$SaveFileDialog = New-Object System.Windows.Forms.SaveFileDialog -Property @{
		AddExtension	 = $true;
		DefaultExt	     = '.xml';
		FileName		 = "ReleaseInstructions.xml";
		Filter		     = 'XML File|*.xml|All Files|*.*';
		FilterIndex	     = 0;
		InitialDirectory = $initialDirectory;
		Title		     = "Select a xml file";
		ValidateNames    = $true;
	}
	$SaveFileDialog.ShowDialog() | Out-Null
	Return $SaveFileDialog.FileName
}

Function Select-FileDialog ($initialDirectory) {
	$FileDialog = New-Object System.Windows.Forms.OpenFileDialog -Property @{
		AddExtension	 = $true;
		DefaultExt	     = '.xml';
		Filter		     = 'XML File|*.xml|All Files|*.*';
		FilterIndex	     = 0;
		InitialDirectory = $initialDirectory;
		Title		     = "Select a xml file";
		ValidateNames    = $true;
	}
	$FileDialog.ShowDialog() | Out-Null
	Return $FileDialog.FileName
}
#endregion

$copyToolStripMenuItem_Click = {
	$consolebox.Copy()
}

$toolstripmenuitem1_Click = {
	$consolebox2.Copy()
}

$buttonIISConnector2016_Click = {
	If (-not (Get-Process -Name "coldfusion" -ErrorAction SilentlyContinue)) {
		[void][System.Windows.Forms.MessageBox]::Show("Please start ColdFusion before attempting to connect it to IIS.", "Warning")
		Log-Console "Starting wsconfig..."
		Start-Process $cf2016ServerDir\ColdFusion\cfusion\runtime\bin\wsconfig.exe -Verb RunAs
	} Else {
		Log-Console "Starting wsconfig..."
		Start-Process $cf2016ServerDir\ColdFusion\cfusion\runtime\bin\wsconfig.exe -Verb RunAs
	}
}

$buttonStartFakeSMTPEmail2016_Click = {
	Log-Console "Starting FakeSMTP with logging to $devRoot\Logs\FakeSMTP"
	Start-Process java.exe -ArgumentList "-jar $cf2016ServerDir\fakeSMTP-2.0.jar -o $devRoot\Logs\FakeSMTP -s" -Verb RunAs
}

$buttonStartColdFusion201612_Click = {
	Log-Console "Starting ColdFusion 2016..."
	Start-Process "C:\Program Files\ConsoleZ\Console.exe" -ArgumentList "-t CMD -r ""/C $cf2016ServerDir\ColdFusion\cfusion\bin\cfstart.bat"" -reuse" -Verb RunAs
	$userName = $env:USERNAME
	$query = "SELECT * FROM CF2016Tracker WHERE UserName = `'$userName`'"
	$queryResults = Invoke-Sqlcmd2 -ServerInstance txv12sqeqnc21 -Database DevTools -Query $query
	If (-not ($queryResults)) {
		$insert = "INSERT INTO CF2016Tracker VALUES (`'$userName`', 1, getdate())"
		Invoke-Sqlcmd2 -ServerInstance txv12sqeqnc21 -Database DevTools -Query $insert
	} Else {
		$newCount = $queryResults.CF2016Starts + 1
		$update = "UPDATE CF2016Tracker SET CF2016Starts=$newCount,LastUpdate=getdate() WHERE UserName=`'$userName`'"
		Invoke-Sqlcmd2 -ServerInstance txv12sqeqnc21 -Database DevTools -Query $update
	}
}

$buttonStopColdFusion201612_Click = {
	Stop-Process -Name coldfusion -Force
	Log-Console "ColdFusion 2016 stopped."
}

$buttonClearCF2016ClassFiles_Click = {
	If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to clear CFClasses?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
		Log-Console "Deleting CF2016 class files from $devRoot\Servers\ColdFusion\cfusion\wwwroot\WEB-INF\cfclasses\"
		Start-Job -ScriptBlock {
			Param ($path) Remove-Directory $path
			Get-ChildItem $path -Recurse -Force | Where-Object {
				$_.PSIsContainer -ne $true
			} | ForEach-Object {
				Remove-Item -Path $_.FullName -Force -ErrorAction SilentlyContinue -Confirm:$false
			}
			Remove-Item $path -Recurse -Force -ErrorAction SilentlyContinue -Confirm:$false
			mkdir $path
		} -ArgumentList "$devRoot\Servers\ColdFusion\cfusion\wwwroot\WEB-INF\cfclasses"
	}
}

$buttonDelEmails2016_Click = {
	Log-Console "Deleting $devRoot\Logs\FakeSMTP\*"
	Remove-Item "$devRoot\Logs\FakeSMTP" -Recurse -Force -ErrorAction SilentlyContinue
	MKDIR "$devRoot\Logs\FakeSMTP"
}

$buttonDelEmails2018_Click = {
	Log-Console "Deleting $devRoot\Logs\FakeSMTP\*"
	Remove-Item "$devRoot\Logs\FakeSMTP" -Recurse -Force -ErrorAction SilentlyContinue
	MKDIR "$devRoot\Logs\FakeSMTP"
}

$buttonOpenAllSites2016_Click = {
	& cmd.exe /c "START http://allsites.eqlocal/"
}

$buttonUpdateDevBox_Click = {
	Log-Console "Closing DevBox and fetching latest commit."
	Start-Sleep -Seconds 1
	Start-Process "powershell.exe" -ArgumentList "-NoLogo -File $devRoot\Scripts\Reset-DevBox.ps1" -Verb RunAs
	$formDevBox.Close()
}

$buttonClearCF2018ClassFiles_Click = {
	If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to clear CFClasses?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
		Log-Console "Deleting class files from $cf2018ServerDir\Coldfusion2018\wwwroot\WEB-INF\cfclasses\"
		Start-Job -ScriptBlock {
			Param ($path) Remove-Directory $path
			Get-ChildItem $path -Recurse -Force | Where-Object {
				$_.PSIsContainer -ne $true
			} | ForEach-Object {
				Remove-Item -Path $_.FullName -Force -ErrorAction SilentlyContinue -Confirm:$false
			}
			Remove-Item $path -Recurse -Force -ErrorAction SilentlyContinue -Confirm:$false
			mkdir $path
		} -ArgumentList "$cf2018ServerDir\Coldfusion2018\wwwroot\WEB-INF\cfclasses"
	}
}

$buttonStartColdFusion2018_Click = {
	Log-Console "Starting ColdFusion 2018..."
	Start-Process "C:\Program Files\ConsoleZ\Console.exe" -ArgumentList "-t CMD -r ""/C $cf2016ServerDir\ColdFusion2018\cfusion\bin\cfstart.bat"" -reuse" -Verb RunAs
	$userName = $env:USERNAME
	$query = "SELECT * FROM CF2018Tracker WHERE UserName = `'$userName`'"
	$queryResults = Invoke-Sqlcmd2 -ServerInstance txv12sqeqnc21 -Database DevTools -Query $query
	If (-not ($queryResults)) {
		$insert = "INSERT INTO CF2018Tracker VALUES (`'$userName`', 1, getdate())"
		Invoke-Sqlcmd2 -ServerInstance txv12sqeqnc21 -Database DevTools -Query $insert
	} Else {
		$newCount = $queryResults.CF9Starts + 1
		$update = "UPDATE CF2018Tracker SET CF2018Starts=$newCount,LastUpdate=getdate() WHERE UserName=`'$userName`'"
		Invoke-Sqlcmd2 -ServerInstance txv12sqeqnc21 -Database DevTools -Query $update
	}
}

$buttonStopColdFusion2018_Click = {
	Stop-Process -Name coldfusion -Force
	Log-Console "ColdFusion 2018 stopped."
}

$buttonOpenAllSites2018_Click = {
	& cmd.exe /c "START http://allsites.eqlocal/"
}

$buttonStartFakeSMTPEmail2018_Click = {
	Log-Console "Starting FakeSMTP with logging to $devRoot\Logs\FakeSMTP"
	Start-Process java.exe -ArgumentList "-jar $cf2018ServerDir\fakeSMTP-2.0.jar -o $devRoot\Logs\FakeSMTP -s" -Verb RunAs
}

$buttonIISConnector2018_Click = {
	If (-not (Get-Process -Name "coldfusion" -ErrorAction SilentlyContinue)) {
		[void][System.Windows.Forms.MessageBox]::Show("Please start ColdFusion before attempting to connect it to IIS.", "Warning")
		Log-Console "Starting wsconfig..."
		Start-Process $cf2018ServerDir\ColdFusion2018\cfusion\runtime\bin\wsconfig.exe -Verb RunAs
	} Else {
		Log-Console "Starting wsconfig..."
		Start-Process $cf2018ServerDir\ColdFusion2018\cfusion\runtime\bin\wsconfig.exe -Verb RunAs
	}
}

Function Get-IPList {
<#
	.SYNOPSIS
		Gets list of IPs available for web binding.
	
	.DESCRIPTION
		Queries a computer for all IP addresses, with the exception of the main IP registered to DNS.
	
	.PARAMETER computerName
		Name of the server to query.
	
	.EXAMPLE
		PS C:\> Get-IPList -computerName 'CADEVEA02'
	
#>
	Param
	(
		[string]$computerName = $env:COMPUTERNAME
	)
	
	$hostIP = ([System.Net.Dns]::GetHostAddresses($computerName)).IPAddressToString | Where-Object {
		$_ -ne '::1'
	}
	$ipList = Get-WmiObject Win32_NetworkAdapterConfiguration -ComputerName $computerName | Where-Object {
		$_.Ipaddress.length -gt 1
	}
	$ipList = $ipList.IPAddress | Where-Object {
		$_ -ne $hostIP
	}
	Log-Console "Host IP: $hostIP"
	Log-Console "Other IPs:"
	ForEach ($ip In $ipList) {
		Log-Console $ip
	}
}

$buttonSaveFile_Click = {
	$strXmlFilePath = Select-SaveFileDialog -initialDirectory 'C:\'
	Set-XMLFile -xmlData $xmlReleaseInstructions -xmlFile $strXmlFilePath
}

$buttonResetForm_Click = {
	$strReleaseXML = @"
<?xml version="1.0" encoding="UTF-8"?>
<ReleaseInstructions>
	<changeRequest id="0000000"/>
	<jiraIssue id=""/>
	<Instructions/>
	<database>
		<dataScripts>
		</dataScripts>
		<SSIS>
		</SSIS>
		<ODS>
			<Instructions/>
		</ODS>
	</database>
</ReleaseInstructions>
"@
	[xml]$script:xmlReleaseInstructions = $strReleaseXML
	$xmlTextBox.Text = Convert-XMLToString -xml $script:xmlReleaseInstructions
	$textboxCR.Text = "0000000"
	$textboxJiraIssue.Text = $null
	$tbDatabase.Text = $null
	$rtbScriptInstructions.Text = $null
	$tbSSISPackageName.Text = $null
	$tbEnvPath.Text = $null
	$tbServerName.Text = $null
	$rtbSSISInstructions.Text = $null
	$rtbODSInstructions.Text = $null
	$cbReplication.SelectedIndex = 1
	$cbLongRunning.SelectedIndex = 1
	$cbScriptEnvironment.SelectedIndex = 0
	$cbJob.SelectedIndex = 1
	$cbSSISEnvironment.SelectedIndex = 0
}

$textboxCR_TextChanged = {
	$script:xmlReleaseInstructions.ReleaseInstructions.changeRequest.id = $textboxCR.Text
	$xmlTextBox.Text = Convert-XMLToString -xml $script:xmlReleaseInstructions
}

$textboxJiraIssue_TextChanged = {
	$script:xmlReleaseInstructions.ReleaseInstructions.jiraIssue.id = $textboxJiraIssue.Text
	$xmlTextBox.Text = Convert-XMLToString -xml $script:xmlReleaseInstructions
}

$cbScriptType_DropDown = {
	$arrPath = $tbFilePath.Text -split "/"
	$script:oldScriptType = $arrPath[4]
}

$cbScriptType_SelectedIndexChanged = {
	$script:strScriptType = $cbScriptType.Text
	$tbFilePath.Text = $tbFilePath.Text -replace $oldScriptType, $script:strScriptType
}

$tbDatabase_TextChanged = {
	$arrPath = $tbFilePath.Text -split "/"
	$script:strDatabase = $tbDatabase.Text
	$arrPath[3] = $script:strDatabase
	If ($script:strDatabase -eq "servicemart") {
		$arrPath[2] = "servicemart"
	} Else {
		$arrPath[2] = "OLTP"
	}
	$tbFilePath.Text = $arrPath -join "/"
}

$tbFilePath_TextChanged = {
	$script:strFilePath = $tbFilePath.Text
}

$tbFileName_TextChanged = {
	$script:strSQLFile = $tbFileName.Text
} #end tbFileName_TextChanged

$textboxCR_Leave = {
	If ($textboxCR.Text -notmatch "(\d{7})") {
		[void][System.Windows.Forms.MessageBox]::Show("Invalid CR entered, make sure to use 7 digits.", "Error")
		$textboxCR.Text = "0000000"
	}
}

$textboxJiraIssue_Leave = {
	If ($textboxJiraIssue.Text -notmatch "((?<!([A-Za-z]{1,10})-?)[A-Z]+-\d+)") {
		[void][System.Windows.Forms.MessageBox]::Show("Invalid Jira Issue entered, make sure to use JIRA-1234 format.", "Error")
		$textboxCR.Text = "0000000"
	}
}

$cbReplication_SelectedIndexChanged = {
	$script:strReplication = $cbReplication.Text
}

$cbLongRunning_SelectedIndexChanged = {
	$script:strLongRunning = $cbLongRunning.Text
}

$cbScriptEnvironment_SelectedIndexChanged = {
	$script:strScriptEnvironment = $cbScriptEnvironment.Text
}

$rtbScriptInstructions_TextChanged = {
	If ($rtbScriptInstructions.Text -ne "") {
		$script:strScriptInstructions = $rtbScriptInstructions.Text
	} Else {
		$script:strScriptInstructions = $rtbScriptInstructions.Text
	}
}

Function Add-SQLEnvironment {
	$dataScriptNode = (Select-Xml -Xml $xmlReleaseInstructions -XPath '/ReleaseInstructions/database/dataScripts').get_node()
	$envNode = $xmlReleaseInstructions.CreateElement("environment")
	$envNode.SetAttribute("name", "$script:strScriptEnvironment")
	$dataScriptNode.AppendChild($envNode)
}

Function Add-SQLScript {
	$xPath = "/ReleaseInstructions/database/dataScripts/environment[@name=""$script:strScriptEnvironment""]"
	$envNode = (Select-Xml -Xml $xmlReleaseInstructions -XPath $xPath).get_node()
	$scriptNode = $xmlReleaseInstructions.CreateElement("script")
	$scriptNode.SetAttribute("type", "$script:strScriptType")
	$scriptNode.SetAttribute("database", "$script:strDatabase")
	$scriptNode.SetAttribute("path", "$script:strFilePath/$script:strSQLFile")
	$scriptNode.SetAttribute("Replication", "$script:strReplication")
	$scriptNode.SetAttribute("Longrunning", "$script:strLongRunning")
	$envNode.AppendChild($scriptNode)
	If ($script:strScriptInstructions) {
		$xPath = "/ReleaseInstructions/database/dataScripts/environment[@name=""$script:strScriptEnvironment""]/script[@path=""$script:strFilePath/$script:strSQLFile""]"
		$xmlScript = (Select-Xml -Xml $xmlReleaseInstructions -XPath $xPath).get_node()
		$instructions = $xmlReleaseInstructions.CreateElement("Instructions")
		$xmlScript.AppendChild($instructions)
		$xmlScript.Instructions = $script:strScriptInstructions
	}
}

$buttonAddSQLScript_Click = {
	If ($tbFileName.Text -ne "") {
		$dataScripts = $xmlReleaseInstructions.ReleaseInstructions.database.dataScripts
		If ($dataScripts.environment -eq $null -or $dataScripts.environment.name -notcontains $script:strScriptEnvironment) {
			Add-SQLEnvironment
			Add-SQLScript
		} Else {
			Add-SQLScript
		}
		$xmlTextBox.Text = Convert-XMLToString -xml $script:xmlReleaseInstructions
		$tbFileName.Clear()
	} Else {
		[void][System.Windows.Forms.MessageBox]::Show("File Name was left blank, please enter the name of your file.", "Error")
	}
	
}

$tbSSISPackageName_TextChanged = {
	$script:strSSISPackageName = $tbSSISPackageName.Text
}

$tbEnvPath_TextChanged = {
	$script:strEnvPath = $tbEnvPath.Text
}

$tbServerName_TextChanged = {
	$script:strSSISServerName = $tbServerName.Text
}

$cbJob_SelectedIndexChanged = {
	$script:strSSISJob = $cbJob.Text
}

$cbSSISEnvironment_SelectedIndexChanged = {
	$script:strSSISEnvironment = $cbSSISEnvironment.Text
}

$rtbSSISInstructions_TextChanged = {
	$script:strSSISInstructions = $rtbSSISInstructions.Text
}

Function Add-SSISEnvironment {
	$SSIS = (Select-Xml -Xml $xmlReleaseInstructions -XPath '/ReleaseInstructions/database/SSIS').get_node()
	$envNode = $xmlReleaseInstructions.CreateElement("environment")
	$envNode.SetAttribute("name", "$script:strSSISEnvironment")
	$SSIS.AppendChild($envNode)
}

Function Add-SSISPackage {
	$xPath = "/ReleaseInstructions/database/SSIS/environment[@name=""$script:strSSISEnvironment""]"
	$SSISPackage = (Select-Xml -Xml $xmlReleaseInstructions -XPath $xPath).get_node()
	$scriptNode = $xmlReleaseInstructions.CreateElement("script")
	$scriptNode.SetAttribute("name", "$script:strSSISPackageName")
	$scriptNode.SetAttribute("EnvPath", "$script:strEnvPath")
	$scriptNode.SetAttribute("ServerName", "$script:strSSISServerName")
	$scriptNode.SetAttribute("Job", "$script:strSSISJob")
	$SSISPackage.AppendChild($scriptNode)
	If ($script:strSSISInstructions -ne $null) {
		$xPath = "/ReleaseInstructions/database/SSIS/environment[@name=""$script:strSSISEnvironment""]/script[@name=""$script:strSSISPackageName""]"
		$xmlScript = (Select-Xml -Xml $xmlReleaseInstructions -XPath $xPath).get_node()
		$instructions = $xmlReleaseInstructions.CreateElement("Instructions")
		$xmlScript.AppendChild($instructions)
		$xmlScript.Instructions = $script:strSSISInstructions
	}
}

$buttonAddSSISPackage_Click = {
	$SSIS = $xmlReleaseInstructions.ReleaseInstructions.database.SSIS
	If ($SSIS.environment -eq $null -or $SSIS.environment.name -notcontains $script:strSSISEnvironment) {
		Add-SSISEnvironment
		Add-SSISPackage
	} Else {
		Add-SSISPackage
	}
	$xmlTextBox.Text = Convert-XMLToString -xml $script:xmlReleaseInstructions
}

$rtbODSInstructions_TextChanged = {
	$script:strODSInstructions = $rtbODSInstructions.Text
}

$buttonAddODSInstructions_Click = {
	$xmlReleaseInstructions.ReleaseInstructions.database.ODS.Instructions = $script:strODSInstructions
	$xmlTextBox.Text = Convert-XMLToString -xml $script:xmlReleaseInstructions
}

$copyToolStripMenuItem2_Click = {
	$xmlTextBox.Copy()
}

$tabControl_SelectedIndexChanged = {
	If ($tabControl.SelectedIndex -eq 0) {
		$script:cfVersion = 2016
	} ElseIf ($tabControl.SelectedIndex -eq 1) {
		$script:cfVersion = 2018
	} ElseIf ($tabControl.SelectedIndex -eq 2) {
		#Release Instruction Tab
	} ElseIf ($tabControl.SelectedIndex -eq 3) {
		$script:starting = $true
		$scope = [EnvironmentVariableTarget]::Machine
		$Path = [Environment]::GetEnvironmentVariable("PATH", $scope)
		Update-ListBox -ListBox $listboxPATH -Items ($Path -split ";")
		
		#Setup Labels
		$mongoVer = & C:\Development\Servers\mongodb\bin\mongo.exe --version | Select-String -Pattern "v\d\.\d\.\d+"
		$mongoVer = $mongoVer.ToString().Replace("MongoDB shell version ", "")
		$mongoVer = ($mongoVer -split "-")[0]
		$labelMongoDBver.Text = "MongoDB $mongoVer"
		$nodeVer = & node --version
		$npmVer = & npm --version
		$ngVer = ((ng --version | Select-String -Pattern "Angular CLI").Line).Replace('Angular CLI: ', '')
		If ($nodeVer) {
			$labelNodeJSver.Text = "NodeJS $nodeVer"
			$cbNodeVersions.Text = "$nodeVer"
		} Else {
			$labelNodeJSver.Text = "NodeJS not setup"
		}
		If ($npmVer) {
			$labelNPMver.Text = "NPM $npmVer"
		} Else {
			$labelNPMver.Text = "NPM not setup"
		}
		If ($ngVer) {
			$labelNGver.Text = "NG $ngVer"
		} Else {
			$labelNGver.Text = "Angular not setup"
		}
		If (-not (Get-Service MongoDB)) {
			New-Service -Name MongoDB -DisplayName MongoDB -StartupType Manual -BinaryPathName "C:\Development\Servers\MongoDB\bin\mongod.exe --config C:\Development\Servers\MongoDB\mongod.cfg --service --smallfiles"
		}
		If ((Get-Service MongoDB).Status -eq 'Running') {
			$buttonMongoDBService.BackColor = 'LimeGreen'
			$buttonMongoDBService.Text = "MongoDB Service Running"
		} Else {
			$buttonMongoDBService.BackColor = 'Red'
			$buttonMongoDBService.Text = "MongoDB Service Not Running"
		}
		
		#Populate node drop down
		$cbNodeVersions.Items.Clear()
		$nodeDirs = Get-ChildItem -Path "C:\Development\Servers\nodejs" -Directory
		ForEach ($nodeDir In $nodeDirs) {
			Load-ComboBox -ComboBox $cbNodeVersions -Items $nodeDir.Name -Append
		}
		$script:starting = $false
	}
}

$rtbCRInstructions_TextChanged = {
	$script:strCRInstructions = $rtbCRInstructions.Text
} #end rtbCRInstructions_TextChanged

$buttonAddCRInstructions_Click = {
	$xmlReleaseInstructions.ReleaseInstructions.Instructions = $script:strCRInstructions
	$xmlTextBox.Text = Convert-XMLToString -xml $script:xmlReleaseInstructions
} #end buttonAddCRInstructions_Click

$buttonHelp_Click = {
	& cmd.exe /c "START https://eqalm.hq.reotrans.com/confluence/display/DO/Using+the+Release+Instructions+tab+of+DevBox"
}

$buttonMongoDBService_Click = {
	If ((Get-Service MongoDB).Status -eq 'Running') {
		Stop-Service MongoDB
		$buttonMongoDBService.BackColor = 'Red'
		$buttonMongoDBService.Text = "MongoDB Service Not Running"
		Log-Console "MongoDB service has been stopped."
	} Else {
		If (-not (Test-Path "C:\Development\Servers\mongodb\data")) {
			New-Item -Path "C:\Development\Servers\mongodb\data" -ItemType directory
			Start-Service MongoDB
		} Else {
			Start-Service MongoDB
		}
		If ((Get-Service MongoDB).Status -eq 'Running') {
			$buttonMongoDBService.BackColor = 'LimeGreen'
			$buttonMongoDBService.Text = "MongoDB Service Running"
		} Else {
			[void][System.Windows.Forms.MessageBox]::Show("Problem starting MongoDB.  Contact eq_DevOps for support.", "Warning!")
		}
	}
}

$buttonMongoDBCMDLine_Click = {
	If ((Get-Service MongoDB).Status -eq 'Running') {
		Start-Process "C:\Program Files\ConsoleZ\Console.exe" -ArgumentList "-t CMD -r ""/C C:\Development\Servers\mongodb\bin\mongo.exe"" -reuse" -Verb RunAs
		Log-Console "Opened mongo client."
	} Else {
		[void][System.Windows.Forms.MessageBox]::Show("You must start the MongoDB Service before using its CMD.", "Warning!")
	}
}

$buttonMTailMongolog_Click = {
	Start-Process -FilePath "C:\Development\Utilities\mTail.exe" -ArgumentList "C:\Development\Servers\mongodb\log\mongo.log /start" -Verb RunAs
}

Function Test-XMLFile {
<#
	.SYNOPSIS
		Validates a XML file against a XSD schema file.
	
	.DESCRIPTION
		Validates a XML file against a XSD schema file.
	
	.PARAMETER XmlFile
		Path to the XML file to validate.
	
	.PARAMETER XSDFile
		Path to the XSD file to validate against.
		
	.EXAMPLE
		PS C:\> Test-XMLFile -XmlFile 'C:\Path\To\the\xml\file.xml' -XSDFile 'C:\Path\To\the\xsd\file.xsd'
	
	.OUTPUTS
		System.Boolean
#>
	[CmdletBinding()]
	[OutputType([string])]
	Param
	(
		[Parameter(Mandatory = $true)]
		[string]$XmlFile,
		[string]$XSDFile = "C:\Development\Scripts\ReleaseInstructions.xsd",
		[scriptblock]$ValidationEventHandler = {
			Write-Error $args[1].Exception
		}
	)
	
	$xml = New-Object System.Xml.XmlDocument
	$schemaReader = New-Object System.Xml.XmlTextReader $XSDFile
	$schema = [System.Xml.Schema.XmlSchema]::Read($schemaReader, $ValidationEventHandler)
	$xml.Schemas.Add($schema) | Out-Null
	$xml.Load($XmlFile)
	$validate = ($xml.Validate($ValidationEventHandler) 2>&1)
	#The Validate method only returns error info, so I capture it and redirect to StdOut as a string.
	If (!($validate)) {
		Return "true"
	} Else {
		#no error found
		Return $validate.ToString().Replace('System.Xml.Schema.XmlSchemaValidationException:', '')
	}
}

$buttonOpenNewNodeConsole_Click = {
	Start-Process "C:\Program Files\ConsoleZ\Console.exe" -ArgumentList "-t CMD -reuse" -Verb RunAs
}

$buttonValidateFile_Click = {
	$validationPath = Select-FileDialog -initialDirectory 'C:\'
	$xmlValidation = Test-XMLFile -XmlFile $validationPath
	If ($xmlValidation -eq "true") {
		[void][System.Windows.Forms.MessageBox]::Show("Your ReleaseInstructions.xml are valid.", "Valid!")
	} Else {
		[void][System.Windows.Forms.MessageBox]::Show($xmlValidation, "Error!")
	}
}

$buttonPDFService2016_Click = {
	If ((Get-Service CFHTMLTOPDF).Status -eq 'Running') {
		Stop-Service CFHTMLTOPDF
		$buttonPDFService2016.BackColor = 'OrangeRed'
		$buttonPDFService2016.Text = "CFHTMLTOPDF Service Not Running"
		Log-Console "CFHTMLTOPDF service has been stopped."
	} Else {
		Start-Service CFHTMLTOPDF
		If ((Get-Service CFHTMLTOPDF).Status -eq 'Running') {
			$buttonPDFService2016.BackColor = 'LimeGreen'
			$buttonPDFService2016.Text = "CFHTMLTOPDF Service Running"
			Log-Console "CFHTMLTOPDF service has been started."
		} Else {
			[void][System.Windows.Forms.MessageBox]::Show("Problem starting CFHTMLTOPDF.  Contact eq_DevOps for support.", "Warning!")
		}
	}
}

$clbDBRepos2016_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	If (!$starting) {
		If (-not (Test-Path "$script:sandboxRoot\Database")) {
			New-Item -Path "$script:sandboxRoot\Database" -ItemType directory
		}
		$repo = ($clbDBRepos2016.Items[$_.Index]).Replace(' ', '-').ToLower()
		If ($_.NewValue -eq 'Checked') {
			$script:starting = $true
			$clbDBRepos2018.SetItemCheckState($_.Index, 1)
			$script:starting = $false
			If (-not (Test-Path "$script:sandboxRoot\Database\$repo")) {
				Push-Location "$script:sandboxRoot\Database"
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqDB/$repo.git" -Verb RunAs
				Pop-Location
			} Else {
				#[void][System.Windows.Forms.MessageBox]::Show("You must start the MongoDB Service before using its CMD.", "Warning!")
				If ([System.Windows.Forms.MessageBox]::Show("$repo directory already exists, delete it and clone the repo again?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					cmd /c rmdir "$script:sandboxRoot\Database\$repo" /s /q
					Push-Location "$script:sandboxRoot\Database"
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqDB/$repo.git" -Verb RunAs
					Pop-Location
				}
			}
		} Else {
			If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to drop the $repo repo?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
				cmd /c rmdir "$script:sandboxRoot\Database\$repo" /s /q
				$script:starting = $true
				$clbDBRepos2018.SetItemCheckState($_.Index, 0)
				$script:starting = $false
			} Else {
				$_.NewValue = 'Checked'
			}
		}
	}
}

$clbArchRepos2016_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	If (!$starting) {
		If (-not (Test-Path "$script:sandboxRoot\Architecture")) {
			New-Item -Path "$script:sandboxRoot\Architecture" -ItemType directory
		}
		$repo = ($clbArchRepos2016.Items[$_.Index]).Replace(' ', '-').ToLower()
		If ($_.NewValue -eq 'Checked') {
			$script:starting = $true
			$clbArchRepos2018.SetItemCheckState($_.Index, 1)
			$script:starting = $false
			If (-not (Test-Path "$script:sandboxRoot\Architecture\$repo")) {
				Push-Location "$script:sandboxRoot\Architecture"
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/$repo.git" -Verb RunAs
				Pop-Location
			} Else {
				#[void][System.Windows.Forms.MessageBox]::Show("You must start the MongoDB Service before using its CMD.", "Warning!")
				If ([System.Windows.Forms.MessageBox]::Show("$repo directory already exists, delete it and clone the repo again?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					cmd /c rmdir "$script:sandboxRoot\Architecture\$repo" /s /q
					Push-Location "$script:sandboxRoot\Architecture"
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/$repo.git" -Verb RunAs
					Pop-Location
				}
			}
		} Else {
			If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to drop the $repo repo?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
				cmd /c rmdir "$script:sandboxRoot\Architecture\$repo" /s /q
				$script:starting = $true
				$clbArchRepos2018.SetItemCheckState($_.Index, 0)
				$script:starting = $false
			} Else {
				$_.NewValue = 'Checked'
			}
		}
	}
}

$clbDBRepos2018_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	If (!$starting) {
		If (-not (Test-Path "$script:sandboxRoot\Pro")) {
			New-Item -Path "$script:sandboxRoot\Pro" -ItemType directory
		}
		$repo = ($clbDBRepos2018.Items[$_.Index]).Replace(' ', '-').ToLower()
		If ($_.NewValue -eq 'Checked') {
			$script:starting = $true
			$clbDBRepos2016.SetItemCheckState($_.Index, 1)
			$script:starting = $false
			If (-not (Test-Path "$script:sandboxRoot\Pro\$repo")) {
				Push-Location "$script:sandboxRoot\Pro"
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqpro/$repo.git" -Verb RunAs
				Pop-Location
			} Else {
				#[void][System.Windows.Forms.MessageBox]::Show("You must start the MongoDB Service before using its CMD.", "Warning!")
				If ([System.Windows.Forms.MessageBox]::Show("$repo directory already exists, delete it and clone the repo again?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					cmd /c rmdir "$script:sandboxRoot\Pro\$repo" /s /q
					Push-Location "$script:sandboxRoot\Pro"
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqpro/$repo.git" -Verb RunAs
					Pop-Location
				}
			}
		} Else {
			If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to drop the $repo repo?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
				cmd /c rmdir "$script:sandboxRoot\Pro\$repo" /s /q
				$script:starting = $true
				$clbDBRepos2016.SetItemCheckState($_.Index, 0)
				$script:starting = $false
			} Else {
				$_.NewValue = 'Checked'
			}
		}
	}
}

$clbArchRepos2018_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	If (!$starting) {
		If (-not (Test-Path "$script:sandboxRoot\Architecture")) {
			New-Item -Path "$script:sandboxRoot\Architecture" -ItemType directory
		}
		$repo = ($clbArchRepos2018.Items[$_.Index]).Replace(' ', '-').ToLower()
		If ($_.NewValue -eq 'Checked') {
			$script:starting = $true
			$clbArchRepos2016.SetItemCheckState($_.Index, 1)
			$script:starting = $false
			If (-not (Test-Path "$script:sandboxRoot\Architecture\$repo")) {
				Push-Location "$script:sandboxRoot\Architecture"
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/$repo.git" -Verb RunAs
				Pop-Location
			} Else {
				#[void][System.Windows.Forms.MessageBox]::Show("You must start the MongoDB Service before using its CMD.", "Warning!")
				If ([System.Windows.Forms.MessageBox]::Show("$repo directory already exists, delete it and clone the repo again?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					cmd /c rmdir "$script:sandboxRoot\Architecture\$repo" /s /q
					Push-Location "$script:sandboxRoot\Architecture"
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/$repo.git" -Verb RunAs
					Pop-Location
				}
			}
		} Else {
			If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to drop the $repo repo?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
				cmd /c rmdir "$script:sandboxRoot\Architecture\$repo" /s /q
				$script:starting = $true
				$clbArchRepos2016.SetItemCheckState($_.Index, 0)
				$script:starting = $false
			} Else {
				$_.NewValue = 'Checked'
			}
		}
	}
}

$buttonPDFService2018_Click = {
	If ((Get-Service CFHTMLTOPDF).Status -eq 'Running') {
		Stop-Service CFHTMLTOPDF
		$buttonPDFService2018.BackColor = 'OrangeRed'
		$buttonPDFService2018.Text = "CFHTMLTOPDF Service Not Running"
		Log-Console "CFHTMLTOPDF service has been stopped."
	} Else {
		Start-Service CFHTMLTOPDF
		If ((Get-Service CFHTMLTOPDF).Status -eq 'Running') {
			$buttonPDFService2018.BackColor = 'LimeGreen'
			$buttonPDFService2018.Text = "CFHTMLTOPDF Service Running"
			Log-Console "CFHTMLTOPDF service has been started."
		} Else {
			[void][System.Windows.Forms.MessageBox]::Show("Problem starting CFHTMLTOPDF.  Contact eq_DevOps for support.", "Warning!")
		}
	}
} #end buttonPDFService2018_Click

$labelUpdate_Click = {
	& cmd.exe /c "START https://eqalm.hq.reotrans.com/confluence/display/DO/DevBox+Release+Notes/"
} #end labelUpdate_Click

$clbCoreBinBranches2016_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemCheckEventArgs]
	If (!$starting) {
		If (-not (Test-Path "$script:sandboxRoot\Core")) {
			New-Item -Path "$script:sandboxRoot\Core" -ItemType directory
		}
		$repo = "binaries"
		If ($_.NewValue -eq 'Checked') {
			$script:starting = $true
			$clbCoreBinBranches2018.SetItemCheckState($_.Index, 1)
			$script:starting = $false
			If (-not (Test-Path "$script:sandboxRoot\Core\$repo")) {
				Push-Location "$script:sandboxRoot\Core"
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/binaries.git" -Verb RunAs
				Pop-Location
			} Else {
				#[void][System.Windows.Forms.MessageBox]::Show("You must start the MongoDB Service before using its CMD.", "Warning!")
				If ([System.Windows.Forms.MessageBox]::Show("$repo directory already exists, delete it and clone the repo again?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					cmd /c rmdir "$script:sandboxRoot\Core\$repo" /s /q
					Push-Location "$script:sandboxRoot\Core"
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/binaries.git" -Verb RunAs
					Pop-Location
				}
			}
		} Else {
			If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to drop the $repo repo?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
				cmd /c rmdir "$script:sandboxRoot\Core\$repo" /s /q
				$script:starting = $true
				$clbCoreBinBranches2018.SetItemCheckState($_.Index, 0)
				$script:starting = $false
			} Else {
				$_.NewValue = 'Checked'
			}
		}
	}
} #end clbCoreBinBranches2016_ItemCheck

$clbCoreAppBranches2016_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemCheckEventArgs]
	If (!$starting) {
		If (-not (Test-Path "$script:sandboxRoot\Core")) {
			New-Item -Path "$script:sandboxRoot\Core" -ItemType directory
		}
		$branch = ($clbCoreAppBranches2016.Items[$_.Index])
		If ($_.NewValue -eq 'Checked') {
			$script:starting = $true
			$clbCoreAppBranches2018.SetItemCheckState($_.Index, 1)
			$script:starting = $false
			If (-not (Test-Path "$script:sandboxRoot\Core\$branch")) {
				Push-Location "$script:sandboxRoot\Core"
				If ($branch -eq "Master") {
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/application.git Master" -Verb RunAs
				} Else {
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/application.git -b $branch $($branch -replace '/', '.')" -Verb RunAs
				}
				Pop-Location
			} Else {
				#[void][System.Windows.Forms.MessageBox]::Show("You must start the MongoDB Service before using its CMD.", "Warning!")
				If ([System.Windows.Forms.MessageBox]::Show("$branch directory already exists, delete it and clone the repo again?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					cmd /c rmdir "$script:sandboxRoot\Core\$branch" /s /q
					Push-Location "$script:sandboxRoot\Core"
					If ($branch -eq "Master") {
						Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/application.git Master" -Verb RunAs
					} Else {
						Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/application.git -b $branch $($branch -replace '/', '.')" -Verb RunAs
					}
					Pop-Location
				}
			}
		} Else {
			If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to drop the $branch repo?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
				cmd /c rmdir "$script:sandboxRoot\Core\$($branch -replace '/', '.')" /s /q
				$script:starting = $true
				$clbCoreAppBranches2018.SetItemCheckState($_.Index, 0)
				$script:starting = $false
			} Else {
				$_.NewValue = 'Checked'
			}
		}
	}
} #end clbCoreAppBranches2016_ItemCheck

$cbCF2016Sites_DropDown = {
	$cbCF2016Sites.Items.Clear()
	$cbCF2016Sites.Text = "Choose a branch"
	$script:arrSites.Clear()
	$script:arrSites = @()
	$arrRootFolders = Get-ChildItem -Path "$devRoot\Sandbox\Core" -Directory -Exclude "binaries"
	ForEach ($branchDir In $arrRootFolders) {
		If (Test-Path "$devRoot\Sandbox\Core\$($branchDir.Name)\v5\Application.cfc") {
			$script:arrSites += $branchDir.Name
		}
	}
	
	For ($i = 0; $i -lt $script:arrSites.Length; $i++) {
		Load-ComboBox $cbCF2016Sites $script:arrSites[$i] -Append
	}
} #end cbCF2016Sites_DropDown

$cbCF2016Sites_SelectedIndexChanged = {
	$button2016gitDropSite.Enabled = $true
	$button2016gitCreateSite.Enabled = $true
	$script:homeDir = $script:arrSites[$cbCF2016Sites.SelectedIndex]
	If ($script:homeDir -match "$script:regexGitEnvironments") {
		$script:branchName = $script:homeDir
		$script:homeDir = "$script:devRoot\Sandbox\Core\$script:homeDir"
		#[void][System.Windows.Forms.MessageBox]::Show("$($script:homeDir)", "Test!")
		If (Site-Exists "$script:branchName.eqlocal") {
			Log-Console "Website $script:branchName.eqlocal found in IIS."
		} Else {
			Log-Console "Website $script:branchName.eqlocal needs to be created."
		}
	} Else {
		[void][System.Windows.Forms.MessageBox]::Show("Invalid Environment or Release '$script:variant' in '$script:release'.", "Error")
	}
} #end cbCF2016Sites_SelectedIndexChanged

$button2016gitCreateSite_Click = {
	Log-Console "Creating websites for $script:branchName..."
	checkCFSetup $script:rootSiteDir $script:rootSiteName $script:devSetupDir
	$arrPortals = @()
	ForEach ($portal In $aPortals) {
		$arrPortals += $portal
	}
	
	createWebSite "$script:branchName.eqlocal" $script:homeDir "$script:homeDir\v5" $arrPortals
	createWebSite "csa.$script:branchName.eqlocal" $script:homeDir "$script:homeDir\csa"  @()
	If (!(Test-Path "$script:homeDir\api")) {
		New-Item "$script:homeDir\api" -ItemType directory -Force
	}
	createWebSite "api.$script:branchName.eqlocal" $script:homeDir "$script:homeDir\api"  @()
	createWebSite "webservices.$script:branchName.eqlocal" $script:homeDir "$script:homeDir\webservices"  @()
	createWebSite "v5webservices.$script:branchName.eqlocal" $script:homeDir "$script:homeDir\v5webservices"  @()
	createWebSite "ws.$script:branchName.eqlocal" $script:homeDir "$script:homeDir\oms"  @()
	Log-Console "Websites for $script:branchName have been created."
} #end button2016gitCreateSite_Click

$button2016gitDropSite_Click = {
	Log-Console "Dropping websites for $script:branchName"
	dropWebsite "$script:branchName.eqlocal"
	dropWebsite "csa.$script:branchName.eqlocal"
	dropWebsite "ws.$script:branchName.eqlocal"
	dropWebsite "api.$script:branchName.eqlocal"
	dropWebsite "webservices.$script:branchName.eqlocal"
	dropWebsite "v5webservices.$script:branchName.eqlocal"
	Log-Console "Websites for $script:branchName have been dropped."
} #end button2016gitDropSite_Click

$invokeCFCompileToolStripMenuItem1_Click = {
	If (!$starting) {
		$devPath = $clbCoreAppBranches2016.SelectedItem.ToString()
		If ($clbCoreAppBranches2016.GetItemCheckState($clbCoreAppBranches2016.SelectedIndex) -eq 'Checked') {
			Log-Console "Invoking CFCompile to generate cfclasses for $devPath"
			Log-Console "DevBox will not respond while compiling, please wait..."
			cmd.exe /c $rootCF2016Install\cfusion\bin\cfcompile.bat $devRoot\Sandbox\Core\$script:environment\ $devRoot\Sandbox\Core\$script:environment\ 2>&1 | Tee-Object -Variable cfcompile
			If ($cfcompile.Exception.Message) {
				$ErrorMessage = $null
				$capture = $false
				ForEach ($line In $cfcompile.Exception.Message) {
					Write-Output $line
					If ($line -match "Errors found") {
						$capture = $true
					}
					If ($capture -eq $true) {
						$ErrorMessage += $line
					}
				}
				Log-Console -strInput $ErrorMessage
			}
		} Else {
			[void][System.Windows.Forms.MessageBox]::Show("You must first have the Sandbox checked out before you can resync it!", "Error!")
		}
	}
} #end invokeCFCompileToolStripMenuItem1_Click

$makeEQSymLinkToolStripMenuItem2_Click = {
	If ($clbCoreAppBranches2016.SelectedItem.ToString() -eq "") {
		[void][System.Windows.Forms.MessageBox]::Show("You must select a branch to link to first.", "Warning")
	} Else {
		makeSymLink -variantName $clbCoreAppBranches2016.SelectedItem.ToString() -replace '/', '.'
		If (Get-Process coldfusion) {
			Get-Process coldfusion | Stop-Process -Force
			Start-Process "C:\Program Files\ConsoleZ\Console.exe" -ArgumentList "-t CMD -r ""/C $cf2016ServerDir\ColdFusion\cfusion\bin\cfstart.bat"" -reuse" -Verb RunAs
		}
	}
} #end makeEQSymLinkToolStripMenuItem2_Click

Function Set-GitSharedCOM {
	$COMBranch = $clbCoreAppBranches2016.SelectedItem.ToString()
	If (Test-Path "$script:sandboxRoot\Architecture\devtools\common\com") {
		Remove-Item $script:sandboxRoot\Architecture\devtools\common\com -Recurse -Force -ErrorAction SilentlyContinue -Confirm:$false
		& cmd /c mklink /J $script:sandboxRoot\Architecture\devtools\common\com $script:sandboxRoot\Core\$COMBranch\com
	} Else {
		& cmd /c mklink /J $script:sandboxRoot\Architecture\devtools\common\com $script:sandboxRoot\Core\$COMBranch\com
	}
	If (Test-Path "$script:sandboxRoot\Architecture\devtools\common\com\equator\apps") {
		Remove-Item "$script:sandboxRoot\Architecture\devtools\common\com\equator\apps" -Recurse -Force -ErrorAction SilentlyContinue -Confirm:$false
		& cmd /c mklink /J $script:sandboxRoot\Architecture\devtools\common\com\equator\apps $script:sandboxRoot\Architecture\devtools\com\equator\apps
	} Else {
		& cmd /c mklink /J $script:sandboxRoot\Architecture\devtools\common\com\equator\apps $script:sandboxRoot\Architecture\devtools\com\equator\apps
	}
}

$setupDevToolsToolStripMenuItem2_Click = {
	$coreBranch = $clbCoreAppBranches2016.SelectedItem.ToString()
	$devToolsBranch = "master"
	If (!(Test-Path "$devRoot\Sandbox\Architecture")) {
		New-Item -Path "$devRoot\Sandbox\Architecture" -ItemType directory
	}
	If ($coreBranch -eq $null) {
		[void][System.Windows.Forms.MessageBox]::Show("Please select a branch to use with DevTools.", "Error!")
	} Else {
		If (!(Test-Path "$devRoot\Sandbox\Architecture\devtools")) {
			Push-Location -Path "$devRoot\Sandbox\Architecture"
			Log-Console "Cloning the DevTools $devToolsBranch branch..."
			If ($devToolsBranch -eq 'master') {
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git" -Wait -Verb RunAs
			} Else {
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git -b $devToolsBranch" -Wait -Verb RunAs
			}
			Pop-Location
			Set-GitSharedCOM
		} ElseIf (Test-Path "$devRoot\Sandbox\Architecture\devtools\.git\HEAD") {
			Push-Location -Path "$devRoot\Sandbox\Architecture\devtools"
			$branch = (& git branch) -replace '\* ', ''
			Pop-Location
			If ($branch -eq $devToolsBranch) {
				Push-Location -Path "$devRoot\Sandbox\Architecture\devtools"
				Log-Console "Resyncing the DevTools $branch branch..."
				Remove-Item -Path "$script:sandboxRoot\Architecture\devtools\common" -Recurse -Force
				Start-Process git -ArgumentList "reset HEAD --hard" -Wait -Verb RunAs
				Start-Process git -ArgumentList "pull" -Wait -Verb RunAs
				Pop-Location
				Set-GitSharedCOM
			} Else {
				If ([System.Windows.Forms.MessageBox]::Show("Replace current $branch branch with $devToolsBranch?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					Log-Console "Deleting $script:sandboxRoot\Architecture\devtools"
					Try {
						Remove-Directory -Path "$script:sandboxRoot\Architecture\devtools"
					} Catch {
						Log-Console "There was a problem removing $script:sandboxRoot\Architecture\devtools.  Please delete it manually and try again."
					}
					If (!(Test-Path "$devRoot\Sandbox\Architecture\devtools")) {
						Push-Location -Path "$devRoot\Sandbox\Architecture"
						Log-Console "Cloning the DevTools $coreBranch branch..."
						If ($coreBranch -eq 'master') {
							Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git" -Wait -Verb RunAs
						} Else {
							Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git -b $coreBranch" -Wait -Verb RunAs
						}
						Pop-Location
						Set-GitSharedCOM
					}
				} Else {
					Set-GitSharedCOM
				}
			}
		} Else {
			Push-Location -Path "$devRoot\Sandbox\Architecture"
			Log-Console "Removing current DevTools folder and cloning the DevTools git repo..."
			Remove-Directory -Path "$devRoot\Sandbox\Architecture\devtools"
			If ($coreBranch -eq 'master') {
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git" -Wait -Verb RunAs
			} Else {
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git -b $coreBranch" -Wait -Verb RunAs
			}
			Pop-Location
			Set-GitSharedCOM
		}
		If (-not (Get-Item "IIS:\sites\devtools.eqlocal")) {
			New-Website -name "devtools.eqlocal" -HostHeader "devtools.eqlocal" -PhysicalPath "$script:sandboxRoot\Architecture\devtools\www" -Force | Out-Null
			New-WebVirtualDirectory -site "devtools.eqlocal" -Name "jakarta" -PhysicalPath "$script:rootCF2016Install\config\wsconfig\1" | Out-Null
			New-WebVirtualDirectory -site "devtools.eqlocal" -Name "cf_scripts" -PhysicalPath "$script:rootCF2016Install\cfusion\wwwroot\cf_scripts" | Out-Null
			New-WebVirtualDirectory -site "devtools.eqlocal" -Name "externalModules" -PhysicalPath "$script:sandboxRoot\Architecture\devtools\common\modules" | Out-Null
			New-WebVirtualDirectory -site "devtools.eqlocal" -Name "common" -PhysicalPath "$script:sandboxRoot\Architecture\devtools\common" | Out-Null
		}
		Log-Console "You must restart ColdFusion before using devtools.eqlocal!"
	}
	$archRepos = (Get-Repositories -ProjectKey ARCH).name
	$i = 0
	ForEach ($repo In $archRepos) {
		If (Test-Path "$script:sandboxRoot\Architecture\$repo") {
			$clbArchRepos2016.SetItemChecked($i, $true)
			$clbArchRepos2018.SetItemChecked($i, $true)
		}
		$i++
	}
} #end setupDevToolsToolStripMenuItem2_Click

$buttonAddToEnd_Click = {
	$pathAdd = $rtbPathAdd.Text
	$scope = [EnvironmentVariableTarget]::Machine
	$Path = [Environment]::GetEnvironmentVariable("PATH", $scope)
	[Environment]::SetEnvironmentVariable("PATH", "$Path;$pathAdd", $scope)
	$listboxPATH.Items.Clear()
	$labelPATHHasBeenUpdatedPl.Visible = $true
}

$buttonAddToBeginning_Click = {
	$pathAdd = $rtbPathAdd.Text
	$scope = [EnvironmentVariableTarget]::Machine
	$Path = [Environment]::GetEnvironmentVariable("PATH", $scope)
	[Environment]::SetEnvironmentVariable("PATH", "$pathAdd;$Path", $scope)
	$listboxPATH.Items.Clear()
	$labelPATHHasBeenUpdatedPl.Visible = $true
}

$buttonRemoveSelection_Click = {
	If ($listboxPATH.SelectedItems -match "windows") {
		[System.Windows.Forms.MessageBox]::Show("Please do not attempt to remove a Windows path from PATH!", "Error!")
	} else {
		$scope = [EnvironmentVariableTarget]::Machine
		$Path = [Environment]::GetEnvironmentVariable("PATH", $scope)
		For ($i = 0; $i -lt $listboxPATH.SelectedIndices.Count; $i++) {
			If ($listboxPATH.SelectedIndices[$i] -eq ($listboxPATH.Items.Count - 1)) {
				$removeStr = ";$($listboxPATH.SelectedItems[$i])"
				$Path = $Path.Replace($removeStr, "")
			} else {
				$removeStr = "$($listboxPATH.SelectedItems[$i]);"
				$Path = $Path.Replace($removeStr, "")
			}
		}
		[Environment]::SetEnvironmentVariable("PATH", "$Path", $scope)
		$listboxPATH.Items.Clear()
		$labelPATHHasBeenUpdatedPl.Visible = $true
	}
	
}

$cbNodeVersions_SelectedIndexChanged = {
	If (-not ($script:starting)) {
		$pathAdd = $rtbPathAdd.Text
		$scope = [EnvironmentVariableTarget]::Machine
		$Path = [Environment]::GetEnvironmentVariable("PATH", $scope)
		If ($Path -match "node") {
			$Path = $Path -replace "v\d{1,3}.\d{1,3}.\d{1,3}", $cbNodeVersions.Text
		} else {
			$Path = $Path + ";C:\Development\Servers\nodejs\$($cbNodeVersions.Text)"
		}
		[Environment]::SetEnvironmentVariable("PATH", "$Path", $scope)
		$listboxPATH.Items.Clear()
		$labelPATHHasBeenUpdatedPl.Visible = $true
		Push-Location "C:\Development\Servers\nodejs\$($cbNodeVersions.Text)"
		$nodeVer = & .\node --version
		$labelNodeJSver.Text = "NodeJS $nodeVer"
		$npmVer = & .\npm --version
		$labelNPMver.Text = "NPM $npmVer"
		$ngVer = ((& .\ng --version | Select-String -Pattern "Angular CLI").Line).Replace('Angular CLI: ', '')
		If (-not ($ngVer)) {
			$labelNGver.Text = "NG not setup"
		} else {
			$labelNGver.Text = "NG $ngVer"
		}
		Pop-Location
	}
}

$clbCoreBinBranches2018_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemCheckEventArgs]
	If (!$starting) {
		If (-not (Test-Path "$script:sandboxRoot\Core")) {
			New-Item -Path "$script:sandboxRoot\Core" -ItemType directory
		}
		$repo = "binaries"
		If ($_.NewValue -eq 'Checked') {
			$script:starting = $true
			$clbCoreBinBranches2016.SetItemCheckState($_.Index, 1)
			$script:starting = $false
			If (-not (Test-Path "$script:sandboxRoot\Core\$repo")) {
				Push-Location "$script:sandboxRoot\Core"
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/binaries.git" -Verb RunAs
				Pop-Location
			} Else {
				#[void][System.Windows.Forms.MessageBox]::Show("You must start the MongoDB Service before using its CMD.", "Warning!")
				If ([System.Windows.Forms.MessageBox]::Show("$repo directory already exists, delete it and clone the repo again?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					cmd /c rmdir "$script:sandboxRoot\Core\$repo" /s /q
					Push-Location "$script:sandboxRoot\Core"
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/binaries.git" -Verb RunAs
					Pop-Location
				}
			}
		} Else {
			If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to drop the $repo repo?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
				cmd /c rmdir "$script:sandboxRoot\Core\$repo" /s /q
				$script:starting = $true
				$clbCoreBinBranches2016.SetItemCheckState($_.Index, 0)
				$script:starting = $false
			} Else {
				$_.NewValue = 'Checked'
			}
		}
	}
}

$clbCoreAppBranches2018_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemCheckEventArgs]
	If (!$starting) {
		If (-not (Test-Path "$script:sandboxRoot\Core")) {
			New-Item -Path "$script:sandboxRoot\Core" -ItemType directory
		}
		$branch = ($clbCoreAppBranches2016.Items[$_.Index])
		If ($_.NewValue -eq 'Checked') {
			$script:starting = $true
			$clbCoreAppBranches2016.SetItemCheckState($_.Index, 1)
			$script:starting = $false
			If (-not (Test-Path "$script:sandboxRoot\Core\$branch")) {
				Push-Location "$script:sandboxRoot\Core"
				If ($branch -eq "Master") {
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/application.git Master" -Verb RunAs
				} Else {
					Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/application.git -b $branch $($branch -replace '/', '.')" -Verb RunAs
				}
				Pop-Location
			} Else {
				#[void][System.Windows.Forms.MessageBox]::Show("You must start the MongoDB Service before using its CMD.", "Warning!")
				If ([System.Windows.Forms.MessageBox]::Show("$branch directory already exists, delete it and clone the repo again?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					cmd /c rmdir "$script:sandboxRoot\Core\$branch" /s /q
					Push-Location "$script:sandboxRoot\Core"
					If ($branch -eq "Master") {
						Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/application.git Master" -Verb RunAs
					} Else {
						Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqcore/application.git -b $branch $($branch -replace '/', '.')" -Verb RunAs
					}
					Pop-Location
				}
			}
		} Else {
			If ([System.Windows.Forms.MessageBox]::Show("Are you sure you want to drop the $branch repo?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
				cmd /c rmdir "$script:sandboxRoot\Core\$($branch -replace '/', '.')" /s /q
				$script:starting = $true
				$clbCoreAppBranches2016.SetItemCheckState($_.Index, 0)
				$script:starting = $false
			} Else {
				$_.NewValue = 'Checked'
			}
		}
	}
}

$makeEQSymLinkToolStripMenuItem_Click = {
	If ($clbCoreAppBranches2018.SelectedItem.ToString() -eq "") {
		[void][System.Windows.Forms.MessageBox]::Show("You must select a branch to link to first.", "Warning")
	} Else {
		makeSymLink -variantName $clbCoreAppBranches2018.SelectedItem.ToString() -replace '/', '.'
		If (Get-Process coldfusion) {
			Get-Process coldfusion | Stop-Process -Force
			Start-Process "C:\Program Files\ConsoleZ\Console.exe" -ArgumentList "-t CMD -r ""/C $cf2018ServerDir\ColdFusion2018\cfusion\bin\cfstart.bat"" -reuse" -Verb RunAs
		}
	}
}

$setupDevToolsToolStripMenuItem_Click = {
	$coreBranch = $clbCoreAppBranches2018.SelectedItem.ToString()
	$devToolsBranch = "master"
	If (!(Test-Path "$devRoot\Sandbox\Architecture")) {
		New-Item -Path "$devRoot\Sandbox\Architecture" -ItemType directory
	}
	If ($coreBranch -eq $null) {
		[void][System.Windows.Forms.MessageBox]::Show("Please select a branch to use with DevTools.", "Error!")
	} Else {
		If (!(Test-Path "$devRoot\Sandbox\Architecture\devtools")) {
			Push-Location -Path "$devRoot\Sandbox\Architecture"
			Log-Console "Cloning the DevTools $devToolsBranch branch..."
			If ($devToolsBranch -eq 'master') {
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git" -Wait -Verb RunAs
			} Else {
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git -b $devToolsBranch" -Wait -Verb RunAs
			}
			Pop-Location
			Set-GitSharedCOM
		} ElseIf (Test-Path "$devRoot\Sandbox\Architecture\devtools\.git\HEAD") {
			Push-Location -Path "$devRoot\Sandbox\Architecture\devtools"
			$branch = (& git branch) -replace '\* ', ''
			Pop-Location
			If ($branch -eq $devToolsBranch) {
				Push-Location -Path "$devRoot\Sandbox\Architecture\devtools"
				Log-Console "Resyncing the DevTools $branch branch..."
				Remove-Item -Path "$script:sandboxRoot\Architecture\devtools\common" -Recurse -Force
				Start-Process git -ArgumentList "reset HEAD --hard" -Wait -Verb RunAs
				Start-Process git -ArgumentList "pull" -Wait -Verb RunAs
				Pop-Location
				Set-GitSharedCOM
			} Else {
				If ([System.Windows.Forms.MessageBox]::Show("Replace current $branch branch with $devToolsBranch?", "Verify", [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes") {
					Log-Console "Deleting $script:sandboxRoot\Architecture\devtools"
					Try {
						Remove-Directory -Path "$script:sandboxRoot\Architecture\devtools"
					} Catch {
						Log-Console "There was a problem removing $script:sandboxRoot\Architecture\devtools.  Please delete it manually and try again."
					}
					If (!(Test-Path "$devRoot\Sandbox\Architecture\devtools")) {
						Push-Location -Path "$devRoot\Sandbox\Architecture"
						Log-Console "Cloning the DevTools $coreBranch branch..."
						If ($coreBranch -eq 'master') {
							Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git" -Wait -Verb RunAs
						} Else {
							Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git -b $coreBranch" -Wait -Verb RunAs
						}
						Pop-Location
						Set-GitSharedCOM
					}
				} Else {
					Set-GitSharedCOM
				}
			}
		} Else {
			Push-Location -Path "$devRoot\Sandbox\Architecture"
			Log-Console "Removing current DevTools folder and cloning the DevTools git repo..."
			Remove-Directory -Path "$devRoot\Sandbox\Architecture\devtools"
			If ($coreBranch -eq 'master') {
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git" -Wait -Verb RunAs
			} Else {
				Start-Process git -ArgumentList "clone https://eqalm.hq.reotrans.com/bitbucket/scm/eqarch/devtools.git -b $coreBranch" -Wait -Verb RunAs
			}
			Pop-Location
			Set-GitSharedCOM
		}
		If (-not (Get-Item "IIS:\sites\devtools.eqlocal")) {
			New-Website -name "devtools.eqlocal" -HostHeader "devtools.eqlocal" -PhysicalPath "$script:sandboxRoot\Architecture\devtools\www" -Force | Out-Null
			New-WebVirtualDirectory -site "devtools.eqlocal" -Name "jakarta" -PhysicalPath "$script:rootCF2016Install\config\wsconfig\1" | Out-Null
			New-WebVirtualDirectory -site "devtools.eqlocal" -Name "cf_scripts" -PhysicalPath "$script:rootCF2016Install\cfusion\wwwroot\cf_scripts" | Out-Null
			New-WebVirtualDirectory -site "devtools.eqlocal" -Name "externalModules" -PhysicalPath "$script:sandboxRoot\Architecture\devtools\common\modules" | Out-Null
			New-WebVirtualDirectory -site "devtools.eqlocal" -Name "common" -PhysicalPath "$script:sandboxRoot\Architecture\devtools\common" | Out-Null
		}
		Log-Console "You must restart ColdFusion before using devtools.eqlocal!"
	}
	$archRepos = (Get-Repositories -ProjectKey ARCH).name
	$i = 0
	ForEach ($repo In $archRepos) {
		If (Test-Path "$script:sandboxRoot\Architecture\$repo") {
			$clbArchRepos2016.SetItemChecked($i, $true)
			$clbArchRepos2018.SetItemChecked($i, $true)
		}
		$i++
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>