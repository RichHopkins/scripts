Import-Module UMN-Google

Function Get-GoogleAccessToken {
	<#
	.SYNOPSIS
		Retruns an Access Token that can be used to authenticate to Google Apps API
	
	.DESCRIPTION
		Retruns an Access Token that can be used to authenticate to Google Apps API.
		
		Taken from https://jamesachambers.com/modify-google-sheets-using-powershell/
	
	.PARAMETER certPath
		Path to the .p12 cert file
	
	.PARAMETER apiEmail
		The email address generated by Google for your api connections.
	
	.PARAMETER certPassword
		Default password is "notasecret", only needed if you changed the cert password from default
	
	.EXAMPLE
		PS C:\> $accessToken = Get-GoogleAccessToken -certPath "C:\credFiles\path_to_cert.p12" -apiEmail 'rhopkinsposh@some_random_domain.gserviceaccount.com'
	#>
	[OutputType([string])]
	Param
	(
		[Parameter(Mandatory = $true,
				   Position = 0)]
		[string]$certPath,
		[Parameter(Mandatory = $true,
				   Position = 1)]
		[string]$apiEmail,
		[Parameter(Position = 2)]
		[string]$certPassword = "notasecret"
	)
	
	Import-Module UMN-Google
	
	# Set security protocol to TLS 1.2 to avoid TLS errors
	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
	
	# Google API Authozation
	$scope = "https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file"
	$accessToken = Get-GOAuthTokenService -scope $scope -certPath $certPath -certPswd $certPassword -iss $apiEmail
	Return $accessToken
}

Function Convert-ToLetters {
	<#
	.SYNOPSIS
		Convert an int into column letters needed for Excel or Google Sheets
	
	.DESCRIPTION
		#https://justaprogrammer.net/2012/01/09/using-powershell-to-represent-base-26-as-the-uppercase-english-alphabet/
	
	.PARAMETER value
		Int to convert
	#>
	[OutputType([string])]
	Param
	(
		[Parameter(Mandatory = $true,
				   Position = 0)]
		[ValidateNotNullOrEmpty()]
		[int]$value
	)
	
	$currVal = $value
	$returnVal = ''
	While ($currVal -ge 26) {
		$returnVal = [char](($currVal) % 26 + 65) + $returnVal
		$currVal = [int][math]::Floor($currVal / 26)
	}
	$returnVal = [char](($currVal) + 64) + $returnVal
	
	Return $returnVal
}

Function Publish-GoogleSheet {
<#
	.SYNOPSIS
		Takes an ArrayList, publishes to Google Sheets and sets permissions for access
	
	.DESCRIPTION
		Takes an ArrayList, publishes to Google Sheets and sets permissions for access.
		
		If spreadsheetTitle is passed, a new sheet will be created.  Or you can pass in spreadsheetID to update an existing spreadsheet.
	
	.PARAMETER accessToken
		Access token needed to authenticate to Google API.
	
	.PARAMETER arrList
		Data to be published to Google Sheets.
	
	.PARAMETER spreadsheetTitle
		Title for the created spreadsheet.
	
	.PARAMETER spreadsheetID
		ID for an existing spreadsheet.
	
	.PARAMETER sheetTitle
		Title of the sheet on the shreadsheet.  Uses Sheet1 by default.
	
	.PARAMETER addUsers
		Array of user emails that will get permissions to the spreadsheet.
	
	.PARAMETER overwrite
		If using spreadsheetTitle and the title is found, overwrite it instead of creating a new spreadsheet
	
	.OUTPUTS
		string, string
	
	.NOTES
		Additional information about the function.
#>
	
	[CmdletBinding(DefaultParameterSetName = 'spreadsheetTitle')]
	[OutputType([string], ParameterSetName = 'spreadsheetTitle')]
	[OutputType([string], ParameterSetName = 'spreadsheetID')]
	[OutputType([string])]
	Param
	(
		[Parameter(Mandatory = $true,
				   Position = 0)]
		[string]$accessToken,
		[Parameter(Mandatory = $true,
				   Position = 1)]
		[ValidateNotNullOrEmpty()]
		[System.Collections.ArrayList]$arrList,
		[Parameter(ParameterSetName = 'spreadsheetTitle',
				   Mandatory = $true,
				   Position = 2)]
		[string]$spreadsheetTitle,
		[Parameter(ParameterSetName = 'spreadsheetID',
				   Mandatory = $true,
				   Position = 2)]
		[string]$spreadsheetID,
		[Parameter(Mandatory = $true,
				   Position = 3)]
		[string]$sheetTitle = "Sheet1",
		[string[]]$addUsers = $env:USERNAME + '@' + $env:USERDNSDOMAIN,
		[Parameter(ParameterSetName = 'spreadsheetTitle')]
		[switch]$overwrite
	)
	
	Import-Module UMN-Google
	
	#create spreadsheet if needed
	If ($PSCmdlet.ParameterSetName -eq 'spreadsheetTitle') {
		#test to see if spreadsheet exists
		$test = Get-GFileID -accessToken $accessToken -fileName $spreadsheetTitle 3>&1
		If ($test -match "There are no files matching") {
			$spreadsheet = New-GSheetSpreadSheet -accessToken $accessToken -title $spreadsheetTitle
			$spreadsheetID = $spreadsheet.spreadsheetId
		} ElseIf ($test.Count -gt 1) {
			$spreadsheetID = $test[1]
		} Else {
			$spreadsheetID = $test
		}
		#Create new sheet/tab if needed
		$test = Get-GSheetData -accessToken $accessToken -sheetName $sheetTitle -spreadSheetID $spreadsheetID -cell AllData 2>&1
		If ($test -match "Cannot index into a null array.") {
			Add-GSheetSheet -accessToken $accessToken -sheetName $sheetTitle -spreadSheetID $spreadsheetID | Out-Null
		} Else {
			Clear-GSheetSheet -accessToken $accessToken -sheetName $sheetTitle -spreadSheetID $spreadsheetID | Out-Null
		}
		#set permissions
		ForEach ($user In $addUsers) {
			Set-GFilePermissions -accessToken $accessToken -fileID $spreadsheetID -role writer -type user -emailAddress $user | Out-Null
		}
	} Else {
		#check to see if sheet exists, create if not, clear if yes
		$test = Get-GSheetData -accessToken $accessToken -sheetName $sheetTitle -spreadSheetID $spreadsheetID -cell AllData 2>&1
		If ($test -match "Cannot index into a null array.") {
			Add-GSheetSheet -accessToken $accessToken -sheetName $sheetTitle -spreadSheetID $spreadsheetID | Out-Null
		} Else {
			Clear-GSheetSheet -accessToken $accessToken -sheetName $sheetTitle -spreadSheetID $spreadsheetID | Out-Null
		}
		#set permissions
		ForEach ($user In $addUsers) {
			Set-GFilePermissions -accessToken $accessToken -fileID $spreadsheetID -role writer -type user -emailAddress $user | Out-Null
		}
	}
	
	#Upload $arrList data to Google Sheets
	$columnLetter = Convert-ToLetters -value $arrList[0].Count
	Set-GSheetData -accessToken $accessToken -rangeA1 "A1:$($columnLetter)$($arrList.Count)" -sheetName $sheetTitle -spreadSheetID $spreadsheetID -values $arrList | Out-Null
	
	Return "https://docs.google.com/spreadsheets/d/$spreadsheetID"
}