Import-Module UMN-Google

Function Get-GoogleAccessToken {
	<#
	.SYNOPSIS
		Retruns an Access Token that can be used to authenticate to Google Apps API
	
	.DESCRIPTION
		Retruns an Access Token that can be used to authenticate to Google Apps API.
		
		Put together using notes from https://jamesachambers.com/modify-google-sheets-using-powershell/
	
	.PARAMETER certPath
		Path to the .p12 cert file
	
	.PARAMETER apiEmail
		The email address generated by Google for your api connections.
	
	.PARAMETER certPassword
		Default password is "notasecret", only needed if you changed the cert password from default
	#>
	[OutputType([string])]
	Param
	(
		[Parameter(Mandatory = $true,
				   Position = 0)]
		[string]$certPath,
		[Parameter(Mandatory = $true,
				   Position = 1)]
		[string]$apiEmail,
		[Parameter(Position = 2)]
		[string]$certPassword = "notasecret"
	)
		
	# Set security protocol to TLS 1.2 to avoid TLS errors
	[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
	
	# Google API Authozation
	$scope = "https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file"
	$accessToken = Get-GOAuthTokenService -scope $scope -certPath $certPath -certPswd $certPassword -iss $apiEmail
	Return $accessToken
}

Function Convert-ToLetters {
	<#
	.SYNOPSIS
		Convert an int into column letters needed for Excel or Google Sheets
	
	.DESCRIPTION
		#https://justaprogrammer.net/2012/01/09/using-powershell-to-represent-base-26-as-the-uppercase-english-alphabet/
	
	.PARAMETER value
		Int to convert
	#>
	
	[OutputType([string])]
	Param
	(
		[Parameter(Mandatory = $true,
				   Position = 0)]
		[ValidateNotNullOrEmpty()]
		[int]$value
	)
	
	$currVal = $value
	$returnVal = ''
	While ($currVal -ge 26) {
		$returnVal = [char](($currVal) % 26 + 65) + $returnVal
		$currVal = [int][math]::Floor($currVal / 26)
	}
	$returnVal = [char](($currVal) + 64) + $returnVal
	
	Return $returnVal
}

Function Publish-GoogleSheet {
	<#
	.SYNOPSIS
		Takes an ArrayList, publishes to Google Sheets and sets permissions for access
	
	.DESCRIPTION
		Takes an ArrayList, publishes to Google Sheets and sets permissions for access
	
		Put together using notes from https://jamesachambers.com/modify-google-sheets-using-powershell/
	
	.PARAMETER arrList
		Data to be published to Google Sheets.
	
	.PARAMETER spreadsheetTitle
		Title for the created spreadsheet.
	
	.PARAMETER sheetTitle
		Title of the sheet on the shreadsheet.  Uses Sheet1 by default.
	
	.PARAMETER addUsers
		Array of user emails that will get permissions to the spreadsheet.
	
	.PARAMETER accessToken
		Access token needed to authenticate to Google API.
	
	#>
	
	[CmdletBinding()]
	Param
	(
		[System.Collections.ArrayList]$arrList,
		[string]$spreadsheetTitle,
		[string]$sheetTitle = "Sheet1",
		[string[]]$addUsers = $env:USERNAME + '@' + $env:USERDNSDOMAIN,
		[string]$accessToken
	)
	
	#create spreadsheet
	$Spreadsheet = New-GSheetSpreadSheet -accessToken $accessToken -title $spreadsheetTitle
	$SpreadsheetID = $Spreadsheet.spreadsheetId
	
	#Create new sheet/tab if needed
	If ($sheetTitle -ne "Sheet1") {
		Add-GSheetSheet -accessToken $accessToken -sheetName $sheetTitle -spreadSheetID $SpreadsheetID
	}
	
	#set permissions
	ForEach ($user In $addUsers) {
		Set-GFilePermissions -accessToken $accessToken -fileID $SpreadsheetID -role writer -type user -emailAddress $user
	}
	
	#Upload $arrList data to Google Sheets with Set-GSheetData
	$columnLetter = Convert-ToLetters -value $arrList[0].Count
	Set-GSheetData -accessToken $accessToken -rangeA1 "A1:$($columnLetter)$($arrList.Count)" -sheetName $sheetTitle -spreadSheetID $SpreadsheetID -values $arrList -Debug -Verbose
}